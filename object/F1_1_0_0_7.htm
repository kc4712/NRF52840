<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\object\F1_1_0_0_7.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\object\F1_1_0_0_7.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Wed Nov 08 10:42:32 2017
<BR><P>
<H3>Maximum Stack Usage =       1992 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
nus_data_handler &rArr; ble_receive_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">DebugMonitor_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">DebugMonitor_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[b]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SysTick_Handler</a><BR>
 <LI><a href="#[1b]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[78]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a><BR>
 <LI><a href="#[7a]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a><BR>
 <LI><a href="#[79]">__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[79]">__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us</a><BR>
 <LI><a href="#[1bc]">app_notify_error_state_transit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1be]">sm_state_change</a><BR>
 <LI><a href="#[256]">cmd_queue_dequeue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[254]">cmd_process</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[35]">BMA2x2_I2C_bus_read</a> from bma2x2_support.o(i.BMA2x2_I2C_bus_read) referenced from bma2x2_support.o(i.I2C_routine)
 <LI><a href="#[34]">BMA2x2_I2C_bus_write</a> from bma2x2_support.o(i.BMA2x2_I2C_bus_write) referenced from bma2x2_support.o(i.I2C_routine)
 <LI><a href="#[36]">BMA2x2_delay_msek</a> from bma2x2_support.o(i.BMA2x2_delay_msek) referenced from bma2x2_support.o(i.I2C_routine)
 <LI><a href="#[6]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[9]">DebugMonitor_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[5]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">SAADC_IRQHandler</a> from nrf_drv_saadc.o(i.SAADC_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrf_drv_twi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from nrf_drv_spi.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">SPIM2_SPIS2_SPI2_IRQHandler</a> from nrf_drv_spi.o(i.SPIM2_SPIS2_SPI2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">SWI0_EGU0_IRQHandler</a> from app_timer.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">SWI2_EGU2_IRQHandler</a> from softdevice_handler.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[32]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[18]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[16]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">UARTE0_UART0_IRQHandler</a> from nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[33]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[38]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[4a]">apple_notification_error_handler</a> from main.o(i.apple_notification_error_handler) referenced from main.o(i.services_init)
 <LI><a href="#[4e]">battery_level_meas_timeout_handler</a> from gc_saadc.o(i.battery_level_meas_timeout_handler) referenced from main.o(i.timers_init)
 <LI><a href="#[3d]">ble_evt_dispatch</a> from main.o(i.ble_evt_dispatch) referenced from main.o(i.ble_stack_init)
 <LI><a href="#[5f]">bsp_button_event_handler</a> from bsp.o(i.bsp_button_event_handler) referenced 4 times from bsp.o(.constdata)
 <LI><a href="#[55]">cmd_ferase</a> from command.o(i.cmd_ferase) referenced from command.o(.constdata)
 <LI><a href="#[56]">cmd_feraseall</a> from command.o(i.cmd_feraseall) referenced from command.o(.constdata)
 <LI><a href="#[53]">cmd_fread</a> from command.o(i.cmd_fread) referenced from command.o(.constdata)
 <LI><a href="#[54]">cmd_fwrite</a> from command.o(i.cmd_fwrite) referenced from command.o(.constdata)
 <LI><a href="#[5d]">cmd_getslpinfo</a> from command.o(i.cmd_getslpinfo) referenced from command.o(.constdata)
 <LI><a href="#[5e]">cmd_help</a> from command.o(i.cmd_help) referenced 2 times from command.o(.constdata)
 <LI><a href="#[5a]">cmd_hwtest</a> from command.o(i.cmd_hwtest) referenced from command.o(.constdata)
 <LI><a href="#[59]">cmd_noti</a> from command.o(i.cmd_noti) referenced from command.o(.constdata)
 <LI><a href="#[57]">cmd_oledpower</a> from command.o(i.cmd_oledpower) referenced from command.o(.constdata)
 <LI><a href="#[58]">cmd_opmode</a> from command.o(i.cmd_opmode) referenced from command.o(.constdata)
 <LI><a href="#[5c]">cmd_poweroff</a> from command.o(i.cmd_poweroff) referenced from command.o(.constdata)
 <LI><a href="#[51]">cmd_reset</a> from command.o(i.cmd_reset) referenced from command.o(.constdata)
 <LI><a href="#[52]">cmd_reset_boot</a> from command.o(i.cmd_reset_boot) referenced from command.o(.constdata)
 <LI><a href="#[5b]">cmd_version</a> from command.o(i.cmd_version) referenced from command.o(.constdata)
 <LI><a href="#[40]">conn_params_error_handler</a> from main.o(i.conn_params_error_handler) referenced from main.o(i.conn_params_init)
 <LI><a href="#[73]">data_page_erase_state_run</a> from pstorage.o(i.data_page_erase_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[72]">data_to_swap_write_state_run</a> from pstorage.o(i.data_to_swap_write_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[41]">db_disc_handler</a> from main.o(i.db_disc_handler) referenced from main.o(i.db_discovery_init)
 <LI><a href="#[45]">device_manager_evt_handler</a> from main.o(i.device_manager_evt_handler) referenced from main.o(i.device_manager_init)
 <LI><a href="#[46]">dm_pstorage_cb_handler</a> from device_manager_peripheral.o(i.dm_pstorage_cb_handler) referenced from device_manager_peripheral.o(i.dm_init)
 <LI><a href="#[37]">fputc</a> from retarget.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[6a]">gattc_context_apply</a> from device_manager_peripheral.o(i.gattc_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[66]">gattc_context_load</a> from device_manager_peripheral.o(i.gattc_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[62]">gattc_context_store</a> from device_manager_peripheral.o(i.gattc_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[69]">gatts_context_apply</a> from device_manager_peripheral.o(i.gatts_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[65]">gatts_context_load</a> from device_manager_peripheral.o(i.gatts_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[61]">gatts_context_store</a> from device_manager_peripheral.o(i.gatts_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[6b]">gattsc_context_apply</a> from device_manager_peripheral.o(i.gattsc_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[67]">gattsc_context_load</a> from device_manager_peripheral.o(i.gattsc_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[63]">gattsc_context_store</a> from device_manager_peripheral.o(i.gattsc_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[39]">gpiote_acc_intr_handler</a> from main.o(i.gpiote_acc_intr_handler) referenced from main.o(i.accelerator_sensor_init)
 <LI><a href="#[47]">gpiote_battery_sense_evt_handler</a> from gc_saadc.o(i.gpiote_battery_sense_evt_handler) referenced from gc_saadc.o(i.init_battery_sense_event)
 <LI><a href="#[3f]">gpiote_in_evt_handler</a> from spi_pah8002.o(i.gpiote_in_evt_handler) referenced from spi_pah8002.o(i.config_gpio_pah8002)
 <LI><a href="#[75]">head_restore_state_run</a> from pstorage.o(i.head_restore_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[4c]">in_pin_handler</a> from spi_flash.o(i.in_pin_handler) referenced from spi_flash.o(i.spi_send_recv)
 <LI><a href="#[31]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[68]">no_service_context_apply</a> from device_manager_peripheral.o(i.no_service_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[64]">no_service_context_load</a> from device_manager_peripheral.o(i.no_service_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[60]">no_service_context_store</a> from device_manager_peripheral.o(i.no_service_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[48]">nus_data_handler</a> from main.o(i.nus_data_handler) referenced from main.o(i.services_init)
 <LI><a href="#[3a]">on_adv_evt</a> from main.o(i.on_adv_evt) referenced from main.o(i.advertising_init)
 <LI><a href="#[49]">on_ancs_c_evt</a> from main.o(i.on_ancs_c_evt) referenced from main.o(i.services_init)
 <LI><a href="#[43]">pstorage_store</a> from pstorage.o(i.pstorage_store) referenced from device_manager_peripheral.o(i.device_context_store)
 <LI><a href="#[43]">pstorage_store</a> from pstorage.o(i.pstorage_store) referenced from device_manager_peripheral.o(i.gatts_context_store)
 <LI><a href="#[42]">pstorage_update</a> from pstorage.o(i.pstorage_update) referenced from device_manager_peripheral.o(i.device_context_store)
 <LI><a href="#[42]">pstorage_update</a> from pstorage.o(i.pstorage_update) referenced from device_manager_peripheral.o(i.gatts_context_store)
 <LI><a href="#[4f]">sec_req_timeout_handler</a> from main.o(i.sec_req_timeout_handler) referenced from main.o(i.timers_init)
 <LI><a href="#[4d]">sensor_timer_handler</a> from main.o(i.sensor_timer_handler) referenced from main.o(i.timers_init)
 <LI><a href="#[4b]">softdevice_fault_handler</a> from softdevice_handler.o(i.softdevice_fault_handler) referenced from softdevice_handler.o(i.softdevice_handler_init)
 <LI><a href="#[6e]">state_erase_data_page_entry_run</a> from pstorage.o(i.state_erase_data_page_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[70]">state_restore_head_entry_run</a> from pstorage.o(i.state_restore_head_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[6f]">state_restore_tail_entry_run</a> from pstorage.o(i.state_restore_tail_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[6c]">state_swap_erase_entry_run</a> from pstorage.o(i.state_swap_erase_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[6d]">state_write_data_swap_entry_run</a> from pstorage.o(i.state_write_data_swap_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[44]">storage_operation_dummy_handler</a> from device_manager_peripheral.o(i.storage_operation_dummy_handler) referenced from device_manager_peripheral.o(i.device_context_store)
 <LI><a href="#[71]">swap_erase_state_run</a> from pstorage.o(i.swap_erase_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[3e]">sys_evt_dispatch</a> from main.o(i.sys_evt_dispatch) referenced from main.o(i.ble_stack_init)
 <LI><a href="#[74]">tail_restore_state_run</a> from pstorage.o(i.tail_restore_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[50]">uart_event_handle</a> from main.o(i.uart_event_handle) referenced from main.o(i.uart_init)
 <LI><a href="#[3b]">uart_event_handler</a> from app_uart_fifo.o(i.uart_event_handler) referenced from app_uart_fifo.o(i.app_uart_init)
 <LI><a href="#[3c]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[33]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[3a7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[76]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3a8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3a9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3aa]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3ab]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[3ac]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[78]"></a>__asm___11_nrf_delay_c_532987f3__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, nrf_delay.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>

<P><STRONG><a name="[79]"></a>__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, nrf_drv_twi.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[7a]"></a>__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, app_timer.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMonitor_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMonitor_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMonitor_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_RMS_8011HR
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3ad]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3ae]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_fwrite
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_i2c_write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fwrite
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_read
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_read_data
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_burst_read_reg
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recal_after_reset
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findpaststartADDR
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_req_feature
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_recent_feature_save
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_info_before_reset_point
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data_before_reset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_req_past_feature
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_recent_feature_save_on_boot
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_info_before_mcu_off
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_info_recall
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_Med_Filter_Process
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPG_Nromalize1
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPG_Diff_Nromalize1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_MULTI_CH_FFT_Peak_Find_Process
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[3af]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_fwrite
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_info_before_reset_point
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_hwtest
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fwrite
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_write_data
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_flash_page_write_position_at_boot
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_info_before_mcu_off
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rcv_rtc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_info_recall
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_open
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3b0]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Reset
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peak_Idx_Mask
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findpaststartADDR
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_req_feature
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_recent_feature_save
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_info_before_reset_point
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fread
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data_before_reset
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_read_data
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_req_past_feature
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_recent_feature_save_on_boot
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_info_before_mcu_off
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_info_recall
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Detect_Open
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_open
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_PPG_Double_Harmonic
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_MULTI_CH_FFT_Peak_Find_Process
</UL>

<P><STRONG><a name="[3b2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[24d]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_execute
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fwrite
</UL>

<P><STRONG><a name="[24b]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ferase
</UL>

<P><STRONG><a name="[27b]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_find
</UL>

<P><STRONG><a name="[252]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_parse
</UL>

<P><STRONG><a name="[80]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fwrite
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fread
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ferase
</UL>

<P><STRONG><a name="[84]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_opmode
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_oledpower
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_noti
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN520_Result
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN520_Result
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN520_Result
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN520_Result
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixFloat
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN520_Result
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixFloat
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_l2f</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ffltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQRT_c51
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixFloat
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN520_Result
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixFloat
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
</UL>

<P><STRONG><a name="[2c6]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
</UL>

<P><STRONG><a name="[2c7]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
</UL>

<P><STRONG><a name="[3b3]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN520_Result
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
</UL>

<P><STRONG><a name="[3b4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3b5]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[83]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[85]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[3b6]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[90]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>

<P><STRONG><a name="[8a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[89]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[188]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3b7]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[187]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3b8]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[77]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3b9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[9b]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[3ba]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3bb]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>AN520_Result</STRONG> (Thumb, 698 bytes, Stack size 120 bytes, an520.o(i.AN520_Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = AN520_Result &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_adc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_timer_handler
</UL>

<P><STRONG><a name="[9f]"></a>AN520_crc_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, an520.o(i.AN520_crc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = AN520_crc_init &rArr; cmd_prom &rArr; i2c_send &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_prom
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN520crc4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>AN520cmd_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, an520.o(i.AN520cmd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = AN520cmd_reset &rArr; i2c_send &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>AN520crc4</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, an520.o(i.AN520crc4))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AN520crc4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN520_crc_init
</UL>

<P><STRONG><a name="[a6]"></a>Avg_Hr_In_Static_Update</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, harmonic_grp_tracking.o(i.Avg_Hr_In_Static_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Avg_Hr_In_Static_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valid_1ch_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Static
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[a8]"></a>BLE_send_featuredata</STRONG> (Thumb, 798 bytes, Stack size 104 bytes, main.o(i.BLE_send_featuredata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = BLE_send_featuredata &rArr; find_req_past_feature &rArr; gc_flash_read &rArr; SPI_FLASH_BufferRead &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_req_past_feature
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_timer_handler
</UL>

<P><STRONG><a name="[ab]"></a>BLE_send_rawdata</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, main.o(i.BLE_send_rawdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BLE_send_rawdata &rArr; ble_send &rArr; ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_timer_handler
</UL>

<P><STRONG><a name="[35]"></a>BMA2x2_I2C_bus_read</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, bma2x2_support.o(i.BMA2x2_I2C_bus_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = BMA2x2_I2C_bus_read &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bma2x2_support.o(i.I2C_routine)
</UL>
<P><STRONG><a name="[34]"></a>BMA2x2_I2C_bus_write</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, bma2x2_support.o(i.BMA2x2_I2C_bus_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = BMA2x2_I2C_bus_write &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bma2x2_support.o(i.I2C_routine)
</UL>
<P><STRONG><a name="[36]"></a>BMA2x2_delay_msek</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bma2x2_support.o(i.BMA2x2_delay_msek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BMA2x2_delay_msek &rArr; nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bma2x2_support.o(i.I2C_routine)
</UL>
<P><STRONG><a name="[2c8]"></a>Bcd2Bin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtc.o(i.Bcd2Bin))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>

<P><STRONG><a name="[37b]"></a>Bin2Bcd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtc.o(i.Bin2Bcd))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
</UL>

<P><STRONG><a name="[de]"></a>Cal_Avg_Hr_In_Static</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, harmonic_grp_tracking.o(i.Cal_Avg_Hr_In_Static))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Static
</UL>

<P><STRONG><a name="[ae]"></a>Cal_First_Hr_in_Motion</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, Hr_motion8002.o(i.Cal_First_Hr_in_Motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Cal_First_Hr_in_Motion
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_p_Peak
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Signal_Grade
</UL>

<P><STRONG><a name="[c3]"></a>Cal_Grp_Candi</STRONG> (Thumb, 710 bytes, Stack size 36 bytes, peak_search.o(i.Cal_Grp_Candi))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Cal_Grp_Candi
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Static
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[b0]"></a>Cal_Hr</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, cal_hr.o(i.Cal_Hr))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Cal_Hr &rArr; Cal_Hr_Motion &rArr; Dynamic_Hr_Model &rArr; Local_Peak_Dy_Hr_Model_Chk &rArr; Peak_Idx_Mask &rArr; Check_Harmonic
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post_Hr_Check
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Non_Motion_First_Peak_Alive_Tracking
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_Peak_Search
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_If_Walk
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;High_Quality_Hr_Jump
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Constrain_Too_LowHigh
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_If_Hr_Near_Motion
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post_Hr_Idx_process
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Trust_Level
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Static
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_Prev_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[bd]"></a>Cal_Hr_Bike</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, cal_hr.o(i.Cal_Hr_Bike))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Cal_Hr_Bike &rArr; Chk_If_Sel_Hr_Good
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_If_Sel_Hr_Good
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valid_1ch_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[bf]"></a>Cal_Hr_By_Long_Term_Pred</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, cal_hr.o(i.Cal_Hr_By_Long_Term_Pred))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cal_Hr_By_Long_Term_Pred &rArr; Cal_Partial_Spec_Std_Mean
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Partial_Spec_Std_Mean
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[c1]"></a>Cal_Hr_Daily</STRONG> (Thumb, 1576 bytes, Stack size 48 bytes, harmonic_grp_tracking.o(i.Cal_Hr_Daily))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Cal_Hr_Daily &rArr; Cal_Partial_Spec_Std_Mean
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Partial_Spec_Std_Mean
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valid_1ch_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Static
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[d8]"></a>Cal_Hr_MA_Walk</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, cal_hr.o(i.Cal_Hr_MA_Walk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cal_Hr_MA_Walk
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[b3]"></a>Cal_Hr_Motion</STRONG> (Thumb, 1740 bytes, Stack size 64 bytes, cal_hr.o(i.Cal_Hr_Motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Cal_Hr_Motion &rArr; Dynamic_Hr_Model &rArr; Local_Peak_Dy_Hr_Model_Chk &rArr; Peak_Idx_Mask &rArr; Check_Harmonic
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Non_Mask_Candi
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post_Grp_Tracking_Chk
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Near_Motion_Flag_Release
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_First_Peak_Alive_Tracking
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWPS
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grp_Tracking_Chk
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Global_First_Peak_Alive_Tracking
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_Hr_Model
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_Steady_Motion_Idx_Ratio
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_If_Sel_Hr_Good
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_If_Hr_Should_Large_than_Motion_Idx
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_Ctn_Grp_Candi
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Partial_Spec_Std_Mean
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Daily
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Grp_Candi
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avg_Hr_In_Static_Update
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Domain_Confirm_HR
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peak_Idx_Mask
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Double_Harmonic_Confirm_Frm
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Constrain_Near_Motion_Big_Jmp_Up
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_Hr_Gt_Motion
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_MA_Walk
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_By_Long_Term_Pred
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Bike
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Spec_Std_Mean
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valid_1ch_Check
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_Motion_Peak
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Rest_Hr_St_Info
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post_Pred_Check
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extra_Motion_Idx_LT130
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extra_Chk_Daily
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr
</UL>

<P><STRONG><a name="[b4]"></a>Cal_Hr_Static</STRONG> (Thumb, 1968 bytes, Stack size 136 bytes, cal_hr.o(i.Cal_Hr_Static))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Cal_Hr_Static &rArr; Static_Half_Hr_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Static_Half_Hr_Check
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Non_Mask_Candi
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Harmonic
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Reset_HR
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Partial_Spec_Std_Mean
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Daily
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Grp_Candi
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Avg_Hr_In_Static
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avg_Hr_In_Static_Update
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flag_first_ghr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Double_Harmonic_Confirm_Frm
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valid_1ch_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr
</UL>

<P><STRONG><a name="[bb]"></a>Cal_Hr_Trust_Level</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, cal_hr.o(i.Cal_Hr_Trust_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Cal_Hr_Trust_Level &rArr; Cal_Partial_Spec_Std_Mean
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Partial_Spec_Std_Mean
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr
</UL>

<P><STRONG><a name="[df]"></a>Cal_PPG_Double_Harmonic</STRONG> (Thumb, 872 bytes, Stack size 64 bytes, peak_search.o(i.Cal_PPG_Double_Harmonic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Cal_PPG_Double_Harmonic &rArr; Check_Harmonic
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Harmonic
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[c0]"></a>Cal_Partial_Spec_Std_Mean</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, harmonic_grp_tracking.o(i.Cal_Partial_Spec_Std_Mean))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cal_Partial_Spec_Std_Mean
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_Peak_Dy_Hr_Model_Chk
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grp_Tracking_Chk
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Daily
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Trust_Level
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Static
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_By_Long_Term_Pred
</UL>

<P><STRONG><a name="[e1]"></a>Cal_RMS_8011HR</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, peak_search.o(i.Cal_RMS_8011HR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Cal_RMS_8011HR &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQRT_c51
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Spec_Std_Mean
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[e3]"></a>Cal_Reg_Shake_Count</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, peak_search.o(i.Cal_Reg_Shake_Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Cal_Reg_Shake_Count &rArr; Check_Harmonic
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Harmonic
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[dd]"></a>Cal_Reset_HR</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, peak_search.o(i.Cal_Reset_HR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Cal_Reset_HR
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valid_1ch_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Static
</UL>

<P><STRONG><a name="[e4]"></a>Cal_Signal_Grade</STRONG> (Thumb, 2134 bytes, Stack size 112 bytes, signal_grade.o(i.Cal_Signal_Grade))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Cal_Signal_Grade &rArr; Static_Half_Hr_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comfirm_Hr_To_Low
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Retry_Try_Signal_grade
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Force_Hr_Out_in10s
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extra_Check_Harmonic
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hr_Energy_From_Harmonic_Candi
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Static_Half_Hr_Check
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valid_1ch_Check
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_First_Hr_in_Motion
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[c7]"></a>Cal_Spec_Std_Mean</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, peak_search.o(i.Cal_Spec_Std_Mean))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Cal_Spec_Std_Mean &rArr; Cal_RMS_8011HR &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_RMS_8011HR
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_MULTI_CH_FFT_Peak_Find_Process
</UL>

<P><STRONG><a name="[da]"></a>Check_Harmonic</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, harmonic_grp_tracking.o(i.Check_Harmonic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Check_Harmonic
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_If_Hr_Near_Motion
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peak_Idx_Mask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Static
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Idx_Tracking
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Base_Mask_Idx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Reg_Shake_Count
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_PPG_Double_Harmonic
</UL>

<P><STRONG><a name="[cd]"></a>Chk_Ctn_Grp_Candi</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, peak_search.o(i.Chk_Ctn_Grp_Candi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chk_Ctn_Grp_Candi
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[d3]"></a>Chk_Hr_Gt_Motion</STRONG> (Thumb, 724 bytes, Stack size 36 bytes, cal_hr.o(i.Chk_Hr_Gt_Motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Chk_Hr_Gt_Motion
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[b2]"></a>Chk_If_Hr_Near_Motion</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, harmonic_grp_tracking.o(i.Chk_If_Hr_Near_Motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Chk_If_Hr_Near_Motion &rArr; Check_Harmonic
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Harmonic
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr
</UL>

<P><STRONG><a name="[cc]"></a>Chk_If_Hr_Should_Large_than_Motion_Idx</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, harmonic_grp_tracking.o(i.Chk_If_Hr_Should_Large_than_Motion_Idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Chk_If_Hr_Should_Large_than_Motion_Idx
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[be]"></a>Chk_If_Sel_Hr_Good</STRONG> (Thumb, 332 bytes, Stack size 52 bytes, peak_search.o(i.Chk_If_Sel_Hr_Good))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Chk_If_Sel_Hr_Good
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_p_Peak
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_Hr_Model
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Bike
</UL>

<P><STRONG><a name="[c6]"></a>Chk_Steady_Motion_Idx_Ratio</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, harmonic_grp_tracking.o(i.Chk_Steady_Motion_Idx_Ratio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chk_Steady_Motion_Idx_Ratio
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[e7]"></a>Comfirm_Hr_To_Low</STRONG> (Thumb, 490 bytes, Stack size 88 bytes, harmonic_grp_tracking.o(i.Comfirm_Hr_To_Low))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Comfirm_Hr_To_Low
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_n_Peak
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_p_Peak
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Signal_Grade
</UL>

<P><STRONG><a name="[cf]"></a>Constrain_Near_Motion_Big_Jmp_Up</STRONG> (Thumb, 178 bytes, Stack size 28 bytes, cal_hr.o(i.Constrain_Near_Motion_Big_Jmp_Up))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Constrain_Near_Motion_Big_Jmp_Up
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[b8]"></a>Constrain_Too_LowHigh</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, harmonic_grp_tracking.o(i.Constrain_Too_LowHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Constrain_Too_LowHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr
</UL>

<P><STRONG><a name="[b9]"></a>Copy_Prev_Data</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, cal_hr.o(i.Copy_Prev_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Copy_Prev_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[10f]"></a>Ctrl_8011_Par</STRONG> (Thumb, 344 bytes, Stack size 36 bytes, Hr_motion8002.o(i.Ctrl_8011_Par))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Ctrl_8011_Par
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[12a]"></a>Disable_OLED</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oled.o(i.Disable_OLED))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Power
</UL>

<P><STRONG><a name="[eb]"></a>DumpMemory</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, command.o(i.DumpMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DumpMemory &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fread
</UL>

<P><STRONG><a name="[ca]"></a>Dynamic_Hr_Model</STRONG> (Thumb, 852 bytes, Stack size 48 bytes, peak_search.o(i.Dynamic_Hr_Model))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Dynamic_Hr_Model &rArr; Local_Peak_Dy_Hr_Model_Chk &rArr; Peak_Idx_Mask &rArr; Check_Harmonic
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_Peak_Dy_Hr_Model_Chk
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Est_Motion_Idx_From_Mems_Eng
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_If_Sel_Hr_Good
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[129]"></a>Enable_OLED</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oled.o(i.Enable_OLED))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Power
</UL>

<P><STRONG><a name="[ec]"></a>Est_Motion_Idx_From_Mems_Eng</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, harmonic_grp_tracking.o(i.Est_Motion_Idx_From_Mems_Eng))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Est_Motion_Idx_From_Mems_Eng &rArr; __hardfp_log10f
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10f
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_Hr_Model
</UL>

<P><STRONG><a name="[e8]"></a>Extra_Check_Harmonic</STRONG> (Thumb, 270 bytes, Stack size 20 bytes, signal_grade.o(i.Extra_Check_Harmonic))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Extra_Check_Harmonic
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Signal_Grade
</UL>

<P><STRONG><a name="[d7]"></a>Extra_Chk_Daily</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, Hr_motion8002.o(i.Extra_Chk_Daily))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[cb]"></a>Extra_Motion_Idx_LT130</STRONG> (Thumb, 206 bytes, Stack size 36 bytes, Hr_motion8002.o(i.Extra_Motion_Idx_LT130))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Extra_Motion_Idx_LT130
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[f0]"></a>FFT_tbl</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, math_op.o(i.FFT_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FFT_tbl &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_FFT
</UL>

<P><STRONG><a name="[f2]"></a>Find_Base_Mask_Idx</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, peak_search.o(i.Find_Base_Mask_Idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Find_Base_Mask_Idx &rArr; Check_Harmonic
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Harmonic
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[10a]"></a>Find_Max</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, Hr_motion8002.o(i.Find_Max))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Find_Max
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[12]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 420 bytes, Stack size 64 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>Get_Hr_Energy_From_Harmonic_Candi</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, peak_search.o(i.Get_Hr_Energy_From_Harmonic_Candi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Get_Hr_Energy_From_Harmonic_Candi
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Signal_Grade
</UL>

<P><STRONG><a name="[d1]"></a>Global_First_Peak_Alive_Tracking</STRONG> (Thumb, 536 bytes, Stack size 36 bytes, peak_search.o(i.Global_First_Peak_Alive_Tracking))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Global_First_Peak_Alive_Tracking
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[c8]"></a>Grp_Tracking_Chk</STRONG> (Thumb, 700 bytes, Stack size 56 bytes, harmonic_grp_tracking.o(i.Grp_Tracking_Chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Grp_Tracking_Chk &rArr; Cal_Partial_Spec_Std_Mean
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Partial_Spec_Std_Mean
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[f8]"></a>HR8002_CoroEntrance</STRONG> (Thumb, 708 bytes, Stack size 80 bytes, Hr_motion8002.o(i.HR8002_CoroEntrance))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = HR8002_CoroEntrance &rArr; HR8002_Detect_Process &rArr; HR8002_Process &rArr; Cal_Hr &rArr; Cal_Hr_Motion &rArr; Dynamic_Hr_Model &rArr; Local_Peak_Dy_Hr_Model_Chk &rArr; Peak_Idx_Mask &rArr; Check_Harmonic
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_Timing_Adjust_Process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Pre_Entrance
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Detect_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Entrance
</UL>

<P><STRONG><a name="[346]"></a>HR8002_Detect_Close</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, Hr_motion8002.o(i.HR8002_Detect_Close))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_close
</UL>

<P><STRONG><a name="[fc]"></a>HR8002_Detect_Open</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, Hr_motion8002.o(i.HR8002_Detect_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HR8002_Detect_Open &rArr; HR8002_Reset &rArr; HR8002_Set_PPG_Ch_Num_Is_IR
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_PPG_Ch_Num_Is_IR
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Reset
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_init_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_open
</UL>

<P><STRONG><a name="[fb]"></a>HR8002_Detect_Process</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, Hr_motion8002.o(i.HR8002_Detect_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = HR8002_Detect_Process &rArr; HR8002_Process &rArr; Cal_Hr &rArr; Cal_Hr_Motion &rArr; Dynamic_Hr_Model &rArr; Local_Peak_Dy_Hr_Model_Chk &rArr; Peak_Idx_Mask &rArr; Check_Harmonic
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQRT_c51
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_CoroEntrance
</UL>

<P><STRONG><a name="[101]"></a>HR8002_Entrance</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, Hr_motion8002.o(i.HR8002_Entrance))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = HR8002_Entrance &rArr; HR8002_CoroEntrance &rArr; HR8002_Detect_Process &rArr; HR8002_Process &rArr; Cal_Hr &rArr; Cal_Hr_Motion &rArr; Dynamic_Hr_Model &rArr; Local_Peak_Dy_Hr_Model_Chk &rArr; Peak_Idx_Mask &rArr; Check_Harmonic
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_CoroEntrance
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_entrance
</UL>

<P><STRONG><a name="[347]"></a>HR8002_Get_HR_Trust_Level</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Get_HR_Trust_Level))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_get_hr_trust_level
</UL>

<P><STRONG><a name="[119]"></a>HR8002_Init_FFT_Data</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, Hr_motion8002.o(i.HR8002_Init_FFT_Data))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Reset
</UL>

<P><STRONG><a name="[f9]"></a>HR8002_Pre_Entrance</STRONG> (Thumb, 230 bytes, Stack size 20 bytes, Hr_motion8002.o(i.HR8002_Pre_Entrance))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HR8002_Pre_Entrance
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_CoroEntrance
</UL>

<P><STRONG><a name="[100]"></a>HR8002_Process</STRONG> (Thumb, 1528 bytes, Stack size 144 bytes, Hr_motion8002.o(i.HR8002_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = HR8002_Process &rArr; Cal_Hr &rArr; Cal_Hr_Motion &rArr; Dynamic_Hr_Model &rArr; Local_Peak_Dy_Hr_Model_Chk &rArr; Peak_Idx_Mask &rArr; Check_Harmonic
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf_20hz_6hz_fixed_c
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf20hz_fixed_c
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hpf_20hz_5_fixed_c
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hpf20hz_fixed_c
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sort_Harmonic_Candi
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Idx_Tracking
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Up_Dn_Smooth_Rms_Gs
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Motion
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_Smooth_Pred_Process
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_Med_Filter_Process
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_IIR_LP_Filter_Process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Base_Mask_Idx
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_Prev_Data
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Signal_Grade
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Reg_Shake_Count
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_RMS_8011HR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_PPG_Double_Harmonic
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPG_Nromalize1
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPG_Diff_Nromalize1
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Exercise_Detect
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_MULTI_CH_FFT_Peak_Find_Process
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Max
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_8011_Par
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Detect_Process
</UL>

<P><STRONG><a name="[ff]"></a>HR8002_Reset</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, Hr_motion8002.o(i.HR8002_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HR8002_Reset &rArr; HR8002_Set_PPG_Ch_Num_Is_IR
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Sample_Rate
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_PPG_Ch_Num_Is_IR
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf_20hz_6hz_fixed_c_initialize
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf20hz_fixed_c_initialize
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hpf_20hz_5_fixed_c_initialize
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hpf20hz_fixed_c_initialize
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_Init_Med_Filter
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_8011_Par
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Init_FFT_Data
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_Init_Smooth_Pred_Process
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_Init_IIR_LP_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Detect_Open
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pah8series_hr_reset
</UL>

<P><STRONG><a name="[365]"></a>HR8002_Set_Default_Hr_Out_in10s</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Default_Hr_Out_in10s))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[371]"></a>HR8002_Set_En_Chk_Hq_3x_ppg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_En_Chk_Hq_3x_ppg))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[35d]"></a>HR8002_Set_En_Chk_Hr_Gt_Motion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_En_Chk_Hr_Gt_Motion))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[364]"></a>HR8002_Set_En_Force_Hr_Out_in10s</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_En_Force_Hr_Out_in10s))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[362]"></a>HR8002_Set_En_Global_First_Peak_Track</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_En_Global_First_Peak_Track))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[36c]"></a>HR8002_Set_En_Half_Hr_Chk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_En_Half_Hr_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[36a]"></a>HR8002_Set_En_Hand_Clap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_En_Hand_Clap))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[35e]"></a>HR8002_Set_En_Hi_Quality_Hr_Jmp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_En_Hi_Quality_Hr_Jmp))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[35c]"></a>HR8002_Set_En_Judge_Walk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_En_Judge_Walk))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[35b]"></a>HR8002_Set_En_LWPS</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_En_LWPS))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[360]"></a>HR8002_Set_En_Local_First_Peak_Track</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_En_Local_First_Peak_Track))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[369]"></a>HR8002_Set_En_MA_Walk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_En_MA_Walk))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[36d]"></a>HR8002_Set_En_Non_Motion_First_Peak_Track</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_En_Non_Motion_First_Peak_Track))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[36b]"></a>HR8002_Set_En_Nor_Pre_Diff_Nor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_En_Nor_Pre_Diff_Nor))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[372]"></a>HR8002_Set_En_Post_Hr_Process</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_En_Post_Hr_Process))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[35f]"></a>HR8002_Set_En_Split_Motion_Peak</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_En_Split_Motion_Peak))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[354]"></a>HR8002_Set_First_Hr_6s</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_First_Hr_6s))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[366]"></a>HR8002_Set_First_Hr_Half_1x_Energy_Thr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_First_Hr_Half_1x_Energy_Thr))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[34e]"></a>HR8002_Set_First_Hr_Mems_Quality_Thr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_First_Hr_Mems_Quality_Thr))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[34c]"></a>HR8002_Set_First_Hr_Multiple_Offset_Mems_Thr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_First_Hr_Multiple_Offset_Mems_Thr))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[34f]"></a>HR8002_Set_First_Hr_Ppg_Quality_Thr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_First_Hr_Ppg_Quality_Thr))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[34d]"></a>HR8002_Set_First_Hr_in_Motion_Flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_First_Hr_in_Motion_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[363]"></a>HR8002_Set_Global_First_Peak_Frm_Alive_Thr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Global_First_Peak_Frm_Alive_Thr))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[34a]"></a>HR8002_Set_Gsensor_Mode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Gsensor_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[368]"></a>HR8002_Set_Hr_In_Motion_Search_End</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Hr_In_Motion_Search_End))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[367]"></a>HR8002_Set_Hr_In_Motion_Search_St</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Hr_In_Motion_Search_St))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[356]"></a>HR8002_Set_Hr_Model_Progress_Ratio</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Hr_Model_Progress_Ratio))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[355]"></a>HR8002_Set_Hr_Model_Time_Const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Hr_Model_Time_Const))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[35a]"></a>HR8002_Set_Hr_Too_Low_Idx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Hr_Too_Low_Idx))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[11e]"></a>HR8002_Set_IIR_LP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_IIR_LP))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_Init_IIR_LP_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[11f]"></a>HR8002_Set_IIR_Smooth_Pred</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_IIR_Smooth_Pred))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_Init_Smooth_Pred_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[357]"></a>HR8002_Set_Init_Walk_Hr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Init_Walk_Hr))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[361]"></a>HR8002_Set_Local_First_Peak_Frm_Alive_Thr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Local_First_Peak_Frm_Alive_Thr))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[36e]"></a>HR8002_Set_Non_Motion_First_Peak_Alive_Frm_Thr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Non_Motion_First_Peak_Alive_Frm_Thr))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[fd]"></a>HR8002_Set_PPG_Ch_Num_Is_IR</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, api_set.o(i.HR8002_Set_PPG_Ch_Num_Is_IR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HR8002_Set_PPG_Ch_Num_Is_IR
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Reset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Detect_Open
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[353]"></a>HR8002_Set_PPG_IsAuto_IsTag_Is8002Pattern</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_PPG_IsAuto_IsTag_Is8002Pattern))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[370]"></a>HR8002_Set_Ppg_Diff_Normalize_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Ppg_Diff_Normalize_len))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[36f]"></a>HR8002_Set_Ppg_Normalize_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Ppg_Normalize_len))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[114]"></a>HR8002_Set_Sample_Rate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Sample_Rate))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Reset
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[34b]"></a>HR8002_Set_Signal_Grade</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Signal_Grade))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[352]"></a>HR8002_Set_Static_HR_DN_IDX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Static_HR_DN_IDX))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[351]"></a>HR8002_Set_Static_HR_UP_IDX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Static_HR_UP_IDX))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[350]"></a>HR8002_Set_Static_Mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Static_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[359]"></a>HR8002_Set_Walk_Hr_Dn_Idx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Walk_Hr_Dn_Idx))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[358]"></a>HR8002_Set_Walk_Hr_Up_Idx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_set.o(i.HR8002_Set_Walk_Hr_Up_Idx))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>

<P><STRONG><a name="[120]"></a>HR_FFT</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, Hr_motion8002.o(i.HR_FFT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HR_FFT &rArr; FFT_tbl &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_MULTI_CH_FFT_Peak_Find_Process
</UL>

<P><STRONG><a name="[111]"></a>HR_IIR_LP_Filter_Process</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, filter8002_fixed.o(i.HR_IIR_LP_Filter_Process))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_Smooth_Pred_Process
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[11b]"></a>HR_Init_IIR_LP_Filter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, filter8002_fixed.o(i.HR_Init_IIR_LP_Filter))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_IIR_LP
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Reset
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_Init_Smooth_Pred_Process
</UL>

<P><STRONG><a name="[11a]"></a>HR_Init_Med_Filter</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, filter8002_fixed.o(i.HR_Init_Med_Filter))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Reset
</UL>

<P><STRONG><a name="[11c]"></a>HR_Init_Smooth_Pred_Process</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, filter8002_fixed.o(i.HR_Init_Smooth_Pred_Process))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_Init_IIR_LP_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_IIR_Smooth_Pred
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Reset
</UL>

<P><STRONG><a name="[10b]"></a>HR_MULTI_CH_FFT_Peak_Find_Process</STRONG> (Thumb, 656 bytes, Stack size 64 bytes, Hr_motion8002.o(i.HR_MULTI_CH_FFT_Peak_Find_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HR_MULTI_CH_FFT_Peak_Find_Process &rArr; Cal_Spec_Std_Mean &rArr; Cal_RMS_8011HR &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peak_Search
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Spec_Std_Mean
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_FFT
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[110]"></a>HR_Med_Filter_Process</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, filter8002_fixed.o(i.HR_Med_Filter_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HR_Med_Filter_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[112]"></a>HR_Smooth_Pred_Process</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, filter8002_fixed.o(i.HR_Smooth_Pred_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HR_Smooth_Pred_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_IIR_LP_Filter_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[fa]"></a>HR_Timing_Adjust_Process</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, Hr_motion8002.o(i.HR_Timing_Adjust_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HR_Timing_Adjust_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_CoroEntrance
</UL>

<P><STRONG><a name="[e9]"></a>Handle_Force_Hr_Out_in10s</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, signal_grade.o(i.Handle_Force_Hr_Out_in10s))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Handle_Force_Hr_Out_in10s
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Signal_Grade
</UL>

<P><STRONG><a name="[b7]"></a>High_Quality_Hr_Jump</STRONG> (Thumb, 324 bytes, Stack size 28 bytes, peak_search.o(i.High_Quality_Hr_Jump))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = High_Quality_Hr_Jump
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr
</UL>

<P><STRONG><a name="[22a]"></a>I2C_routine</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bma2x2_support.o(i.I2C_routine))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_data_readout_template
</UL>

<P><STRONG><a name="[11d]"></a>Init_8011_Par</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, Hr_motion8002.o(i.Init_8011_Par))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Reset
</UL>

<P><STRONG><a name="[122]"></a>Init_OLED_PORT</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, oled.o(i.Init_OLED_PORT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init_OLED_PORT
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[14f]"></a>Is_Motion_Peak</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, peak_search.o(i.Is_Motion_Peak))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post_Hr_Idx_process
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peak_Search
</UL>

<P><STRONG><a name="[ea]"></a>Is_n_Peak</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, peak_search.o(i.Is_n_Peak))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comfirm_Hr_To_Low
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Static_Half_Hr_Check
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Domain_Confirm_HR
</UL>

<P><STRONG><a name="[af]"></a>Is_p_Peak</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, peak_search.o(i.Is_p_Peak))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comfirm_Hr_To_Low
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Static_Half_Hr_Check
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_If_Walk
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_If_Sel_Hr_Good
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peak_Search
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_First_Hr_in_Motion
</UL>

<P><STRONG><a name="[b6]"></a>Judge_If_Walk</STRONG> (Thumb, 550 bytes, Stack size 32 bytes, peak_search.o(i.Judge_If_Walk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Judge_If_Walk &rArr; __hardfp_log10f
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10f
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_p_Peak
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr
</UL>

<P><STRONG><a name="[109]"></a>Judge_Motion</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, peak_search.o(i.Judge_Motion))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[10d]"></a>Judge_Up_Dn_Smooth_Rms_Gs</STRONG> (Thumb, 392 bytes, Stack size 20 bytes, peak_search.o(i.Judge_Up_Dn_Smooth_Rms_Gs))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Judge_Up_Dn_Smooth_Rms_Gs
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[ce]"></a>LWPS</STRONG> (Thumb, 962 bytes, Stack size 48 bytes, peak_search.o(i.LWPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LWPS &rArr; Peak_Search
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10f
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peak_Search
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[d0]"></a>Local_First_Peak_Alive_Tracking</STRONG> (Thumb, 440 bytes, Stack size 28 bytes, peak_search.o(i.Local_First_Peak_Alive_Tracking))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Local_First_Peak_Alive_Tracking
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[ee]"></a>Local_Peak_Dy_Hr_Model_Chk</STRONG> (Thumb, 622 bytes, Stack size 72 bytes, harmonic_grp_tracking.o(i.Local_Peak_Dy_Hr_Model_Chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Local_Peak_Dy_Hr_Model_Chk &rArr; Peak_Idx_Mask &rArr; Check_Harmonic
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Partial_Spec_Std_Mean
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peak_Idx_Mask
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peak_Search
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_Hr_Model
</UL>

<P><STRONG><a name="[b1]"></a>Local_Peak_Search</STRONG> (Thumb, 266 bytes, Stack size 44 bytes, peak_search.o(i.Local_Peak_Search))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Local_Peak_Search &rArr; Peak_Search
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peak_Search
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr
</UL>

<P><STRONG><a name="[d2]"></a>Log_Double_Harmonic_Confirm_Frm</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, cal_hr.o(i.Log_Double_Harmonic_Confirm_Frm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Log_Double_Harmonic_Confirm_Frm
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valid_1ch_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Static
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[108]"></a>Mass_Exercise_Detect</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, Hr_motion8002.o(i.Mass_Exercise_Detect))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[10e]"></a>Motion_Idx_Tracking</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, peak_search.o(i.Motion_Idx_Tracking))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Motion_Idx_Tracking &rArr; Check_Harmonic
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Harmonic
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[c4]"></a>Near_Motion_Flag_Release</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, harmonic_grp_tracking.o(i.Near_Motion_Flag_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Near_Motion_Flag_Release
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valid_1ch_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[ba]"></a>Non_Motion_First_Peak_Alive_Tracking</STRONG> (Thumb, 602 bytes, Stack size 36 bytes, peak_search.o(i.Non_Motion_First_Peak_Alive_Tracking))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Non_Motion_First_Peak_Alive_Tracking
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr
</UL>

<P><STRONG><a name="[124]"></a>OLED_Clear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = OLED_Clear &rArr; OLED_Clear_Line &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Power
</UL>

<P><STRONG><a name="[125]"></a>OLED_Clear_Line</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oled.o(i.OLED_Clear_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = OLED_Clear_Line &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[128]"></a>OLED_Power</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, oled.o(i.OLED_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OLED_Power &rArr; OLED_Clear &rArr; OLED_Clear_Line &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_OLED
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_OLED
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_hwtest
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
</UL>

<P><STRONG><a name="[126]"></a>OLED_Write_Command</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, oled.o(i.OLED_Write_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OLED_Write_Command &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_week
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_unit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_snum
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_schar
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_mnum
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_lnum
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_icon_small
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_icon_mini
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_icon_large
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_charge2
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_charge
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_battery
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_BT
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_blank
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_oledpower
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_hwtest
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Power
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_peripheral_device
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear_Line
</UL>

<P><STRONG><a name="[127]"></a>OLED_Write_Data</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, oled.o(i.OLED_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_week
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_unit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_snum
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_schar
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_mnum
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_lnum
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_icon_small
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_icon_mini
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_icon_large
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_charge2
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_charge
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_battery
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_BT
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_blank
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_hwtest
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear_Line
</UL>

<P><STRONG><a name="[12b]"></a>OLED_act</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, display.o(i.OLED_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = OLED_act &rArr; dp_mnum &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_mnum
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_icon_small
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_blank
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
</UL>

<P><STRONG><a name="[12f]"></a>OLED_act_info</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, display.o(i.OLED_act_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = OLED_act_info &rArr; dp_unit &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_unit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_mnum
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_icon_small
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_blank
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
</UL>

<P><STRONG><a name="[12c]"></a>OLED_blank</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, font.o(i.OLED_blank))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OLED_blank &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_stress
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_step
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_sms
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_sleep
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_info
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_hr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_coach
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_clock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_charge2
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_charge
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_calorie
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_call
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_act_info
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_act
</UL>

<P><STRONG><a name="[131]"></a>OLED_call</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, display.o(i.OLED_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OLED_call &rArr; dp_icon_large &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_icon_large
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_blank
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
</UL>

<P><STRONG><a name="[133]"></a>OLED_calorie</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, display.o(i.OLED_calorie))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = OLED_calorie &rArr; dp_unit &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_unit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_mnum
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_icon_mini
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_blank
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
</UL>

<P><STRONG><a name="[135]"></a>OLED_charge</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, display.o(i.OLED_charge))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OLED_charge &rArr; dp_charge &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_charge
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_blank
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
</UL>

<P><STRONG><a name="[137]"></a>OLED_charge2</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, display.o(i.OLED_charge2))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OLED_charge2 &rArr; dp_charge2 &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_charge2
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_blank
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
</UL>

<P><STRONG><a name="[139]"></a>OLED_clock</STRONG> (Thumb, 490 bytes, Stack size 32 bytes, display.o(i.OLED_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = OLED_clock &rArr; recall_GMT_offset &rArr; gc_flash_read &rArr; SPI_FLASH_BufferRead &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recall_GMT_offset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_week
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_snum
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_lnum
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_battery
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_BT
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_blank
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_GMT
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_gmt_to_display_time
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
</UL>

<P><STRONG><a name="[143]"></a>OLED_coach</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, display.o(i.OLED_coach))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = OLED_coach &rArr; dp_mnum &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_mnum
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_icon_small
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_blank
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
</UL>

<P><STRONG><a name="[144]"></a>OLED_display</STRONG> (Thumb, 2468 bytes, Stack size 40 bytes, display.o(i.OLED_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = OLED_display &rArr; OLED_clock &rArr; recall_GMT_offset &rArr; gc_flash_read &rArr; SPI_FLASH_BufferRead &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_mnum
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_BT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Power
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_stress
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_step
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_sms
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_sleep
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_info
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_hr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_coach
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_clock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_charge2
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_charge
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_calorie
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_call
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_act_info
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_act
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_timer_handler
</UL>

<P><STRONG><a name="[14a]"></a>OLED_hr</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, display.o(i.OLED_hr))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = OLED_hr &rArr; dp_mnum &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_mnum
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_icon_small
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_blank
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
</UL>

<P><STRONG><a name="[149]"></a>OLED_info</STRONG> (Thumb, 1066 bytes, Stack size 40 bytes, display.o(i.OLED_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = OLED_info &rArr; dp_schar &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_schar
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_blank
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
</UL>

<P><STRONG><a name="[14b]"></a>OLED_sleep</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, display.o(i.OLED_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OLED_sleep &rArr; dp_mnum &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_mnum
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_icon_mini
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_blank
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
</UL>

<P><STRONG><a name="[147]"></a>OLED_sms</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, display.o(i.OLED_sms))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = OLED_sms &rArr; dp_mnum &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_mnum
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_icon_large
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_blank
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
</UL>

<P><STRONG><a name="[148]"></a>OLED_step</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, display.o(i.OLED_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = OLED_step &rArr; dp_mnum &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_mnum
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_icon_mini
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_blank
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
</UL>

<P><STRONG><a name="[145]"></a>OLED_stress</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, display.o(i.OLED_stress))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = OLED_stress &rArr; dp_mnum &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_mnum
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_icon_mini
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_blank
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
</UL>

<P><STRONG><a name="[103]"></a>PPG_Diff_Nromalize1</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, Hr_motion8002.o(i.PPG_Diff_Nromalize1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PPG_Diff_Nromalize1
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[102]"></a>PPG_Nromalize1</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, Hr_motion8002.o(i.PPG_Nromalize1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PPG_Nromalize1
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[c2]"></a>Peak_Idx_Mask</STRONG> (Thumb, 436 bytes, Stack size 88 bytes, cal_hr.o(i.Peak_Idx_Mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Peak_Idx_Mask &rArr; Check_Harmonic
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Harmonic
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_Peak_Dy_Hr_Model_Chk
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[121]"></a>Peak_Search</STRONG> (Thumb, 288 bytes, Stack size 68 bytes, peak_search.o(i.Peak_Search))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Peak_Search
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Motion_Peak
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_p_Peak
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_Peak_Dy_Hr_Model_Chk
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_Peak_Search
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWPS
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_MULTI_CH_FFT_Peak_Find_Process
</UL>

<P><STRONG><a name="[c9]"></a>Post_Grp_Tracking_Chk</STRONG> (Thumb, 380 bytes, Stack size 20 bytes, harmonic_grp_tracking.o(i.Post_Grp_Tracking_Chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Post_Grp_Tracking_Chk
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[b5]"></a>Post_Hr_Check</STRONG> (Thumb, 1104 bytes, Stack size 44 bytes, harmonic_grp_tracking.o(i.Post_Hr_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Post_Hr_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr
</UL>

<P><STRONG><a name="[bc]"></a>Post_Hr_Idx_process</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, cal_hr.o(i.Post_Hr_Idx_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Post_Hr_Idx_process
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Motion_Peak
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr
</UL>

<P><STRONG><a name="[d5]"></a>Post_Pred_Check</STRONG> (Thumb, 226 bytes, Stack size 36 bytes, Hr_motion8002.o(i.Post_Pred_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Post_Pred_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[1d]"></a>RTC1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; timeout_handler_exec &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>Record_Rest_Hr_St_Info</STRONG> (Thumb, 230 bytes, Stack size 28 bytes, Hr_motion8002.o(i.Record_Rest_Hr_St_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Record_Rest_Hr_St_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[e5]"></a>Retry_Try_Signal_grade</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, signal_grade.o(i.Retry_Try_Signal_grade))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Signal_Grade
</UL>

<P><STRONG><a name="[13]"></a>SAADC_IRQHandler</STRONG> (Thumb, 520 bytes, Stack size 32 bytes, nrf_drv_saadc.o(i.SAADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SAADC_IRQHandler &rArr; nrf_drv_saadc_buffer_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[157]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SEGGER_RTT_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>

<P><STRONG><a name="[15a]"></a>SEGGER_RTT_printf</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, segger_rtt_printf.o(i.SEGGER_RTT_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_req_timeout_handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[15b]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 504 bytes, Stack size 136 bytes, segger_rtt_printf.o(i.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>

<P><STRONG><a name="[f]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; irq_handler_twi &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler &rArr; irq_handler_spim &rArr; finish_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spim
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.SPIM2_SPIS2_SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPIM2_SPIS2_SPI2_IRQHandler &rArr; irq_handler_spim &rArr; finish_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spim
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[161]"></a>SPI_FLASH_BufferRead</STRONG> (Thumb, 56 bytes, Stack size 272 bytes, spi_flash.o(i.SPI_FLASH_BufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = SPI_FLASH_BufferRead &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_hwtest
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fread
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_read
</UL>

<P><STRONG><a name="[163]"></a>SPI_FLASH_PageWrite</STRONG> (Thumb, 48 bytes, Stack size 272 bytes, spi_flash.o(i.SPI_FLASH_PageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_fwrite
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_hwtest
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fwrite
</UL>

<P><STRONG><a name="[165]"></a>SPI_FLASH_SectorErase</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spi_flash.o(i.SPI_FLASH_SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SPI_FLASH_SectorErase &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_erase
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_hwtest
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ferase
</UL>

<P><STRONG><a name="[164]"></a>SPI_FLASH_WriteEnable</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spi_flash.o(i.SPI_FLASH_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[e2]"></a>SQRT_c51</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, math_op.o(i.SQRT_c51))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SQRT_c51 &rArr; __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_RMS_8011HR
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Detect_Process
</UL>

<P><STRONG><a name="[20]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, softdevice_handler.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; intern_softdevice_events_execute &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>Search_Non_Mask_Candi</STRONG> (Thumb, 188 bytes, Stack size 36 bytes, peak_search.o(i.Search_Non_Mask_Candi))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Search_Non_Mask_Candi
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Static
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[10c]"></a>Sort_Harmonic_Candi</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, peak_search.o(i.Sort_Harmonic_Candi))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Sort_Harmonic_Candi
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[d6]"></a>Split_Motion_Peak</STRONG> (Thumb, 538 bytes, Stack size 44 bytes, Hr_motion8002.o(i.Split_Motion_Peak))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Split_Motion_Peak
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[db]"></a>Static_Half_Hr_Check</STRONG> (Thumb, 1096 bytes, Stack size 104 bytes, peak_search.o(i.Static_Half_Hr_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Static_Half_Hr_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_n_Peak
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_p_Peak
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Static
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Signal_Grade
</UL>

<P><STRONG><a name="[172]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[32]"></a>SystemInit</STRONG> (Thumb, 538 bytes, Stack size 8 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = SystemInit &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_info_before_reset_point
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data_before_reset
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_66
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_57
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_37
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_36
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_32
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_31
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>Time_Domain_Confirm_HR</STRONG> (Thumb, 516 bytes, Stack size 64 bytes, cal_hr.o(i.Time_Domain_Confirm_HR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Time_Domain_Confirm_HR
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_n_Peak
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
</UL>

<P><STRONG><a name="[e]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UARTE0_UART0_IRQHandler &rArr; uarte_irq_handler &rArr; rx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>Valid_1ch_Check</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, Hr_motion8002.o(i.Valid_1ch_Check))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Near_Motion_Flag_Release
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Reset_HR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Daily
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avg_Hr_In_Static_Update
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Double_Harmonic_Confirm_Frm
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Static
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Motion
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Bike
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Signal_Grade
</UL>

<P><STRONG><a name="[175]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3bc]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[a2]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN520_crc_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recall_GMT_offset
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recal_after_reset
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_power_enable
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_twi_init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_ppi_gpiote_init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_initialize
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_saved_info
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_notification_error_handler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerator_sensor_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_send_featuredata
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_timer_handler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findpaststartADDR
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_req_feature
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_recent_feature_save
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_next_sector
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_i2c_write
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_i2c_read
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ks_get_command
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_execute
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_version
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset_boot
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_opmode
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_oledpower
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_hwtest
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_help
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_getslpinfo
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fwrite
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fread
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_feraseall
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ferase
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpMemory
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data_before_reset
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_battery_sense_event
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_spi_flash_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_notification_ancs_handle
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_recent_feature_save_on_boot
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_shell
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_clock
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_info_recall
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_burst_read_reg
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_log_Greencomm
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA2x2_I2C_bus_write
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA2x2_I2C_bus_read
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_pah8002_master_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gpio_pah8002
</UL>

<P><STRONG><a name="[3bd]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[3be]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[177]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3bf]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[14d]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_saved_info
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_info
</UL>

<P><STRONG><a name="[3c0]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3c1]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[189]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[17c]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[3c2]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[ed]"></a>__hardfp_expf</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_Hr_Model
</UL>

<P><STRONG><a name="[3c3]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[ef]"></a>__hardfp_log10f</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, log10f.o(i.__hardfp_log10f))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_log10f
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Est_Motion_Idx_From_Mems_Eng
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWPS
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_If_Walk
</UL>

<P><STRONG><a name="[9e]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN520_Result
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixFloat
</UL>

<P><STRONG><a name="[18a]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
</UL>

<P><STRONG><a name="[3c4]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[f1]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQRT_c51
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_tbl
</UL>

<P><STRONG><a name="[186]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[180]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[17f]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[184]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[181]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[185]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[17e]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10f
</UL>

<P><STRONG><a name="[17a]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10f
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[18c]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[17d]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10f
</UL>

<P><STRONG><a name="[17b]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[179]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[3c5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3c6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3c7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[178]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10f
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[18e]"></a>_pah8002_task</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, pah8002.o(i._pah8002_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _pah8002_task &rArr; pah8002_wakeup &rArr; pah8002_read_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_read_reg
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_write_reg
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_burst_read_reg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_wakeup
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_get_touch_flag_ppg_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_task
</UL>

<P><STRONG><a name="[19e]"></a>accelerator_sensor_init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, main.o(i.accelerator_sensor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = accelerator_sensor_init &rArr; bma2x2_data_readout_template &rArr; bma2x2_set_power_mode &rArr; bma2x2_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_data_readout_template
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_initialize
</UL>

<P><STRONG><a name="[341]"></a>accelerometer_get_fifo</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gc_util.o(i.accelerometer_get_fifo))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_task
</UL>

<P><STRONG><a name="[381]"></a>activity_intensity</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, gc_activity.o(i.activity_intensity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = activity_intensity
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_timer_handler
</UL>

<P><STRONG><a name="[1a3]"></a>adv_data_encode</STRONG> (Thumb, 454 bytes, Stack size 32 bytes, ble_advdata.o(i.adv_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_level_encode
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_value_encode
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_mgr_oob_flags_encode
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_role_encode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_encode
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[1b2]"></a>advertising_init</STRONG> (Thumb, 182 bytes, Stack size 176 bytes, main.o(i.advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = advertising_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b6]"></a>app_error_fault_handler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_info_before_reset_point
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data_before_reset
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_fault_handler
</UL>

<P><STRONG><a name="[167]"></a>app_error_handler_bare</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_twi_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_notification_setup
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_req_timeout_handler
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_discovery_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_timers_start
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_stop
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[1cc]"></a>app_fifo_flush</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_flush))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_flush
</UL>

<P><STRONG><a name="[1b7]"></a>app_fifo_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_fifo.o(i.app_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_fifo_get &rArr; fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[1d1]"></a>app_fifo_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[1ba]"></a>app_fifo_put</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_fifo.o(i.app_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[37d]"></a>app_sched_init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, app_scheduler.o(i.app_sched_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_sched_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
</UL>

<P><STRONG><a name="[201]"></a>app_timer_create</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
</UL>

<P><STRONG><a name="[1bf]"></a>app_timer_init</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_timer_init &rArr; rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c6]"></a>app_timer_start</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_timers_start
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[1c9]"></a>app_timer_stop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_stop
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
</UL>

<P><STRONG><a name="[1cb]"></a>app_uart_flush</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_uart_fifo.o(i.app_uart_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_uart_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_timer_handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_battery_sense_evt_handler
</UL>

<P><STRONG><a name="[1cd]"></a>app_uart_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_uart_fifo.o(i.app_uart_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_uart_get &rArr; nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
</UL>

<P><STRONG><a name="[1d0]"></a>app_uart_init</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, app_uart_fifo.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = app_uart_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_enable
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1d4]"></a>app_uart_put</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_uart_fifo.o(i.app_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_uart_put &rArr; app_fifo_get &rArr; fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_write_string
</UL>

<P><STRONG><a name="[1d7]"></a>app_util_critical_region_enter</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
</UL>

<P><STRONG><a name="[1d9]"></a>app_util_critical_region_exit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
</UL>

<P><STRONG><a name="[4a]"></a>apple_notification_error_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.apple_notification_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = apple_notification_error_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[1dc]"></a>apple_notification_setup</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, main.o(i.apple_notification_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = apple_notification_setup &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_write_string_many
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_notif_source_notif_enable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_data_source_notif_enable
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
</UL>

<P><STRONG><a name="[4e]"></a>battery_level_meas_timeout_handler</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, gc_saadc.o(i.battery_level_meas_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = battery_level_meas_timeout_handler &rArr; nrf_saadc_channel_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battery_level
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.timers_init)
</UL>
<P><STRONG><a name="[1ef]"></a>ble_advdata_set</STRONG> (Thumb, 148 bytes, Stack size 96 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srdata_check
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advdata_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[1b3]"></a>ble_advertising_init</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[1f3]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[1f5]"></a>ble_advertising_on_sys_evt</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[1f4]"></a>ble_advertising_start</STRONG> (Thumb, 616 bytes, Stack size 40 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_address_exists
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_hwtest
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[31d]"></a>ble_advertising_whitelist_reply</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, ble_advertising.o(i.ble_advertising_whitelist_reply))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[383]"></a>ble_ancs_c_attr_add</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_ancs_c.o(i.ble_ancs_c_attr_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_ancs_c_attr_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[1de]"></a>ble_ancs_c_data_source_notif_enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_ancs_c.o(i.ble_ancs_c_data_source_notif_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_ancs_c_data_source_notif_enable &rArr; cccd_configure &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cccd_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_notification_setup
</UL>

<P><STRONG><a name="[31e]"></a>ble_ancs_c_handles_assign</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_ancs_c.o(i.ble_ancs_c_handles_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_ancs_c_handles_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
</UL>

<P><STRONG><a name="[1fa]"></a>ble_ancs_c_init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, ble_ancs_c.o(i.ble_ancs_c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_ancs_c_init &rArr; ble_db_discovery_evt_register &rArr; registered_handler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_evt_register
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[1dd]"></a>ble_ancs_c_notif_source_notif_enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_ancs_c.o(i.ble_ancs_c_notif_source_notif_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_ancs_c_notif_source_notif_enable &rArr; cccd_configure &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cccd_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_notification_setup
</UL>

<P><STRONG><a name="[1fc]"></a>ble_ancs_c_on_ble_evt</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ble_ancs_c.o(i.ble_ancs_c_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ble_ancs_c_on_ble_evt &rArr; on_evt_gattc_notif &rArr; parse_notif
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write_rsp
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_evt_gattc_notif
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[270]"></a>ble_ancs_c_on_db_disc_evt</STRONG> (Thumb, 240 bytes, Stack size 104 bytes, ble_ancs_c.o(i.ble_ancs_c_on_db_disc_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_ancs_c_on_db_disc_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_disc_handler
</UL>

<P><STRONG><a name="[200]"></a>ble_conn_params_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_params_init &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
</UL>

<P><STRONG><a name="[202]"></a>ble_conn_params_on_ble_evt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ble_conn_params.o(i.ble_conn_params_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ble_conn_params_on_ble_evt &rArr; on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[207]"></a>ble_conn_params_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_conn_params.o(i.ble_conn_params_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ble_conn_params_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
</UL>

<P><STRONG><a name="[1fb]"></a>ble_db_discovery_evt_register</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_db_discovery.o(i.ble_db_discovery_evt_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_db_discovery_evt_register &rArr; registered_handler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registered_handler_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_init
</UL>

<P><STRONG><a name="[272]"></a>ble_db_discovery_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ble_db_discovery.o(i.ble_db_discovery_init))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_discovery_init
</UL>

<P><STRONG><a name="[209]"></a>ble_db_discovery_on_ble_evt</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ble_db_discovery.o(i.ble_db_discovery_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ble_db_discovery_on_ble_evt &rArr; on_characteristic_discovery_rsp &rArr; on_srv_disc_completion &rArr; discovery_error_evt_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_primary_srv_discovery_rsp
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[27f]"></a>ble_db_discovery_start</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ble_db_discovery.o(i.ble_db_discovery_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_db_discovery_start
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
</UL>

<P><STRONG><a name="[212]"></a>ble_nus_init</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_nus_init &rArr; tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[20f]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_nus_on_ble_evt &rArr; on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[222]"></a>ble_nus_string_send</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ble_nus.o(i.ble_nus_string_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_nus_string_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send
</UL>

<P><STRONG><a name="[218]"></a>ble_rcv_rtc</STRONG> (Thumb, 250 bytes, Stack size 296 bytes, gc_protocol.o(i.ble_rcv_rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = ble_rcv_rtc &rArr; gc_flash_page_write_data &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_write_data
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
</UL>

<P><STRONG><a name="[21b]"></a>ble_receive_handler</STRONG> (Thumb, 3960 bytes, Stack size 552 bytes, gc_protocol.o(i.ble_receive_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = ble_receive_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findpaststartADDR
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_req_feature
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_info_before_reset_point
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data_before_reset
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_GMT
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_protocol_ctrl_pah8002
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_write_data
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_read_data
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_gmt_to_display_time
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rcv_rtc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_info_recall
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_timer_handler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[a9]"></a>ble_send</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i.ble_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_send &rArr; ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_string_send
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_send_rawdata
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_send_featuredata
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
</UL>

<P><STRONG><a name="[21f]"></a>ble_send_enable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gc_protocol.o(i.ble_send_enable))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
</UL>

<P><STRONG><a name="[1a2]"></a>bma2x2_data_readout_template</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bma2x2_support.o(i.bma2x2_data_readout_template))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bma2x2_data_readout_template &rArr; bma2x2_set_power_mode &rArr; bma2x2_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_read_accel_xyz
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_routine
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_tap_thres
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_tap_durn
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_range
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_power_mode
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_intr_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_intr_double_tap
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_bw
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_get_bw
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerator_sensor_init
</UL>

<P><STRONG><a name="[22f]"></a>bma2x2_get_bw</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_get_bw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_get_bw
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_data_readout_template
</UL>

<P><STRONG><a name="[22b]"></a>bma2x2_init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bma2x2_init &rArr; bma2x2_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_data_readout_template
</UL>

<P><STRONG><a name="[234]"></a>bma2x2_read_accel_xyz</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_read_accel_xyz))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_read_accel_xyz
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_timer_handler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_data_readout_template
</UL>

<P><STRONG><a name="[235]"></a>bma2x2_read_reg</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_hwtest
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_init
</UL>

<P><STRONG><a name="[22d]"></a>bma2x2_set_bw</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_set_bw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_set_bw
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_data_readout_template
</UL>

<P><STRONG><a name="[232]"></a>bma2x2_set_intr_double_tap</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_set_intr_double_tap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_set_intr_double_tap
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_data_readout_template
</UL>

<P><STRONG><a name="[233]"></a>bma2x2_set_intr_enable</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, bma2x2.o(i.bma2x2_set_intr_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bma2x2_set_intr_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_data_readout_template
</UL>

<P><STRONG><a name="[236]"></a>bma2x2_set_mode_value</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, bma2x2.o(i.bma2x2_set_mode_value))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_power_mode
</UL>

<P><STRONG><a name="[22c]"></a>bma2x2_set_power_mode</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, bma2x2.o(i.bma2x2_set_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bma2x2_set_power_mode &rArr; bma2x2_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_write_reg
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_mode_value
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_data_readout_template
</UL>

<P><STRONG><a name="[22e]"></a>bma2x2_set_range</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_set_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_set_range
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_data_readout_template
</UL>

<P><STRONG><a name="[231]"></a>bma2x2_set_tap_durn</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_set_tap_durn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_set_tap_durn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_data_readout_template
</UL>

<P><STRONG><a name="[230]"></a>bma2x2_set_tap_thres</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_set_tap_thres))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_set_tap_thres
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_data_readout_template
</UL>

<P><STRONG><a name="[237]"></a>bma2x2_write_reg</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bma2x2.o(i.bma2x2_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bma2x2_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_hwtest
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_set_power_mode
</UL>

<P><STRONG><a name="[238]"></a>bond_data_load</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.bond_data_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bond_data_load &rArr; pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[210]"></a>bsp_btn_ble_on_ble_evt</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, bsp_btn_ble.o(i.bsp_btn_ble_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_btn_ble_on_ble_evt &rArr; connection_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_buttons_configure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[1b1]"></a>bsp_event_to_button_action_assign</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, bsp.o(i.bsp_event_to_button_action_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_buttons_configure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
</UL>

<P><STRONG><a name="[1b5]"></a>bsp_indication_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp.o(i.bsp_indication_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_stop
</UL>

<P><STRONG><a name="[23d]"></a>calorie</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, gc_activity.o(i.calorie))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = calorie &rArr; calorie_hr
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calorie_step
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calorie_hr
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_timer_handler
</UL>

<P><STRONG><a name="[23e]"></a>calorie_hr</STRONG> (Thumb, 440 bytes, Stack size 12 bytes, gc_activity.o(i.calorie_hr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calorie_hr
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calorie
</UL>

<P><STRONG><a name="[23f]"></a>calorie_step</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, gc_activity.o(i.calorie_step))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calorie
</UL>

<P><STRONG><a name="[dc]"></a>check_flag_first_ghr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cal_hr.o(i.check_flag_first_ghr))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Hr_Static
</UL>

<P><STRONG><a name="[290]"></a>check_flash_page_last</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, flash_control.o(i.check_flash_page_last))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_next_sector
</UL>

<P><STRONG><a name="[241]"></a>check_saved_info</STRONG> (Thumb, 278 bytes, Stack size 776 bytes, main.o(i.check_saved_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = check_saved_info &rArr; gc_flash_read &rArr; SPI_FLASH_BufferRead &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_read
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_initialize
</UL>

<P><STRONG><a name="[9d]"></a>cmd_adc</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, an520.o(i.cmd_adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = cmd_adc &rArr; i2c_send &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN520_Result
</UL>

<P><STRONG><a name="[55]"></a>cmd_ferase</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, command.o(i.cmd_ferase))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cmd_ferase &rArr; SPI_FLASH_SectorErase &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>cmd_feraseall</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, command.o(i.cmd_feraseall))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = cmd_feraseall &rArr; gc_flash_erase &rArr; SPI_FLASH_SectorErase &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_erase
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>cmd_fread</STRONG> (Thumb, 68 bytes, Stack size 280 bytes, command.o(i.cmd_fread))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = cmd_fread &rArr; SPI_FLASH_BufferRead &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpMemory
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>cmd_fwrite</STRONG> (Thumb, 76 bytes, Stack size 288 bytes, command.o(i.cmd_fwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = cmd_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>cmd_getslpinfo</STRONG> (Thumb, 74 bytes, Stack size 288 bytes, command.o(i.cmd_getslpinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = cmd_getslpinfo &rArr; gc_flash_page_read_data &rArr; gc_flash_read &rArr; SPI_FLASH_BufferRead &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_read_data
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>cmd_help</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, command.o(i.cmd_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cmd_help &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>cmd_hwtest</STRONG> (Thumb, 632 bytes, Stack size 576 bytes, command.o(i.cmd_hwtest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = cmd_hwtest &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_i2c_write
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_i2c_read
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_read_reg
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_write_reg
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_read_reg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_protocol_ctrl_pah8002
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Power
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>cmd_noti</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, command.o(i.cmd_noti))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cmd_noti &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>cmd_oledpower</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, command.o(i.cmd_oledpower))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cmd_oledpower &rArr; OLED_Write_Command &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>cmd_opmode</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, command.o(i.cmd_opmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cmd_opmode &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_protocol_ctrl_pah8002
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[251]"></a>cmd_parse</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, command.o(i.cmd_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cmd_parse &rArr; strtok
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_execute
</UL>

<P><STRONG><a name="[5c]"></a>cmd_poweroff</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, command.o(i.cmd_poweroff))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = cmd_poweroff &rArr; gc_power_off_prepare &rArr; reset_prepare &rArr; advertising_stop &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_power_off_prepare
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>cmd_prom</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, an520.o(i.cmd_prom))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = cmd_prom &rArr; i2c_send &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN520_crc_init
</UL>

<P><STRONG><a name="[51]"></a>cmd_reset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, command.o(i.cmd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = cmd_reset &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_info_before_reset_point
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data_before_reset
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>cmd_reset_boot</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, command.o(i.cmd_reset_boot))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = cmd_reset_boot &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_info_before_reset_point
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data_before_reset
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>cmd_version</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, command.o(i.cmd_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cmd_version &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[25c]"></a>command_execute</STRONG> (Thumb, 102 bytes, Stack size 144 bytes, command.o(i.command_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = command_execute &rArr; cmd_parse &rArr; strtok
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmpi
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_parse
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_shell
</UL>

<P><STRONG><a name="[265]"></a>config_gpio_pah8002</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, spi_pah8002.o(i.config_gpio_pah8002))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = config_gpio_pah8002 &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_spi_pah8002_init
</UL>

<P><STRONG><a name="[13b]"></a>convert_gmt_to_display_time</STRONG> (Thumb, 54 bytes, Stack size 28 bytes, gc_activity.o(i.convert_gmt_to_display_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = convert_gmt_to_display_time &rArr; get_time_from_GMT &rArr; get_month_day
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_GMT
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_from_GMT
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recal_after_reset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_info_before_reset_point
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data_before_reset
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_info_before_mcu_off
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_clock
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
</UL>

<P><STRONG><a name="[41]"></a>db_disc_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.db_disc_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = db_disc_handler &rArr; ble_ancs_c_on_db_disc_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_on_db_disc_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.db_discovery_init)
</UL>
<P><STRONG><a name="[273]"></a>debug_shell</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, command.o(i.debug_shell))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = debug_shell &rArr; command_execute &rArr; cmd_parse &rArr; strtok
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ks_get_command
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_execute
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
</UL>

<P><STRONG><a name="[275]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, main.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_sw_reset
</UL>

<P><STRONG><a name="[20e]"></a>dm_ble_evt_handler</STRONG> (Thumb, 1686 bytes, Stack size 88 bytes, device_manager_peripheral.o(i.dm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = dm_ble_evt_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handle_initialize
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_find
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_allocate
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_context_store
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_find
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_evt_notify
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[288]"></a>dm_handle_initialize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.dm_handle_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
</UL>

<P><STRONG><a name="[282]"></a>dm_init</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, device_manager_peripheral.o(i.dm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dm_init &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
</UL>

<P><STRONG><a name="[283]"></a>dm_register</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, device_manager_peripheral.o(i.dm_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dm_register
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
</UL>

<P><STRONG><a name="[37f]"></a>dm_security_setup_req</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.dm_security_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dm_security_setup_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_req_timeout_handler
</UL>

<P><STRONG><a name="[37e]"></a>dm_security_status_req</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.dm_security_status_req))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_req_timeout_handler
</UL>

<P><STRONG><a name="[31c]"></a>dm_whitelist_create</STRONG> (Thumb, 252 bytes, Stack size 20 bytes, device_manager_peripheral.o(i.dm_whitelist_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dm_whitelist_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[140]"></a>dp_BT</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, font.o(i.dp_BT))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dp_BT &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_clock
</UL>

<P><STRONG><a name="[141]"></a>dp_battery</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, font.o(i.dp_battery))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dp_battery &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_clock
</UL>

<P><STRONG><a name="[136]"></a>dp_charge</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, font.o(i.dp_charge))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dp_charge &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_charge
</UL>

<P><STRONG><a name="[138]"></a>dp_charge2</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, font.o(i.dp_charge2))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dp_charge2 &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_charge2
</UL>

<P><STRONG><a name="[132]"></a>dp_icon_large</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, font.o(i.dp_icon_large))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dp_icon_large &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_sms
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_call
</UL>

<P><STRONG><a name="[134]"></a>dp_icon_mini</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, font.o(i.dp_icon_mini))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dp_icon_mini &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_stress
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_step
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_sleep
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_calorie
</UL>

<P><STRONG><a name="[12d]"></a>dp_icon_small</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, font.o(i.dp_icon_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dp_icon_small &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_hr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_coach
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_act_info
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_act
</UL>

<P><STRONG><a name="[142]"></a>dp_lnum</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, font.o(i.dp_lnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dp_lnum &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_clock
</UL>

<P><STRONG><a name="[12e]"></a>dp_mnum</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, font.o(i.dp_mnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dp_mnum &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_stress
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_step
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_sms
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_sleep
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_hr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_coach
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_calorie
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_act_info
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_act
</UL>

<P><STRONG><a name="[14e]"></a>dp_schar</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, font.o(i.dp_schar))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dp_schar &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_info
</UL>

<P><STRONG><a name="[13f]"></a>dp_snum</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, font.o(i.dp_snum))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dp_snum &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_clock
</UL>

<P><STRONG><a name="[130]"></a>dp_unit</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, font.o(i.dp_unit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dp_unit &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_calorie
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_act_info
</UL>

<P><STRONG><a name="[13e]"></a>dp_week</STRONG> (Thumb, 650 bytes, Stack size 32 bytes, font.o(i.dp_week))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dp_week &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_clock
</UL>

<P><STRONG><a name="[28f]"></a>erase_flash_next_sector</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, flash_control.o(i.erase_flash_next_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = erase_flash_next_sector &rArr; gc_flash_erase &rArr; SPI_FLASH_SectorErase &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flash_page_last
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_erase
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_write_data
</UL>

<P><STRONG><a name="[21c]"></a>f_info_recall</STRONG> (Thumb, 332 bytes, Stack size 312 bytes, gc_activity.o(i.f_info_recall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = f_info_recall &rArr; gc_flash_page_read_data &rArr; gc_flash_read &rArr; SPI_FLASH_BufferRead &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_GMT
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_read_data
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
</UL>

<P><STRONG><a name="[183]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[fe]"></a>fft_init_tbl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, math_op.o(i.fft_init_tbl))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Detect_Open
</UL>

<P><STRONG><a name="[294]"></a>filter_common</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, filter8002_fixed.o(i.filter_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = filter_common
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_s32_s32_s32_sr31
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_s32_s32_s32_sr30
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf_20hz_6hz_fixed_c
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf20hz_fixed_c
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hpf_20hz_5_fixed_c
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hpf20hz_fixed_c
</UL>

<P><STRONG><a name="[297]"></a>find_flash_page_write_position_at_boot</STRONG> (Thumb, 178 bytes, Stack size 280 bytes, flash_control.o(i.find_flash_page_write_position_at_boot))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = find_flash_page_write_position_at_boot &rArr; gc_flash_read &rArr; SPI_FLASH_BufferRead &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_initialize
</UL>

<P><STRONG><a name="[298]"></a>find_recent_feature_save</STRONG> (Thumb, 246 bytes, Stack size 584 bytes, flash_control.o(i.find_recent_feature_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = find_recent_feature_save &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_fwrite
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_erase
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_read
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
</UL>

<P><STRONG><a name="[29a]"></a>find_recent_feature_save_on_boot</STRONG> (Thumb, 82 bytes, Stack size 312 bytes, flash_control.o(i.find_recent_feature_save_on_boot))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = find_recent_feature_save_on_boot &rArr; gc_flash_read &rArr; SPI_FLASH_BufferRead &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_read
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[220]"></a>find_req_feature</STRONG> (Thumb, 186 bytes, Stack size 328 bytes, flash_control.o(i.find_req_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = find_req_feature &rArr; gc_flash_read &rArr; SPI_FLASH_BufferRead &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_read
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
</UL>

<P><STRONG><a name="[aa]"></a>find_req_past_feature</STRONG> (Thumb, 52 bytes, Stack size 320 bytes, flash_control.o(i.find_req_past_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = find_req_past_feature &rArr; gc_flash_read &rArr; SPI_FLASH_BufferRead &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_read
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_send_featuredata
</UL>

<P><STRONG><a name="[221]"></a>findpaststartADDR</STRONG> (Thumb, 302 bytes, Stack size 328 bytes, flash_control.o(i.findpaststartADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = findpaststartADDR &rArr; gc_flash_read &rArr; SPI_FLASH_BufferRead &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_read
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
</UL>

<P><STRONG><a name="[29d]"></a>fixFloat</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, gc_activity.o(i.fixFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = fixFloat &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
</UL>

<P><STRONG><a name="[37]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; app_uart_put &rArr; app_fifo_get &rArr; fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[327]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_deinit
</UL>

<P><STRONG><a name="[29f]"></a>fs_queued_op_count_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fstorage.o(i.fs_queued_op_count_get))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
</UL>

<P><STRONG><a name="[2a8]"></a>gc_dev_gpio_set</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, main.o(i.gc_dev_gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gc_dev_gpio_set &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ab]"></a>gc_dev_initialize</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(i.gc_dev_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = gc_dev_initialize &rArr; gc_twi_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recall_GMT_offset
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_twi_init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_ppi_gpiote_init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_saved_info
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerator_sensor_init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_battery_sense_event
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_spi_pah8002_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_spi_flash_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_flash_page_write_position_at_boot
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b3]"></a>gc_disable_pah8002</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pah8002.o(i.gc_disable_pah8002))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gc_disable_pah8002 &rArr; pah8002_deinit &rArr; pah8002_enter_suspend_mode &rArr; pah8002_sw_reset &rArr; pah8002_wakeup &rArr; pah8002_read_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_deinit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_peripheral_device
</UL>

<P><STRONG><a name="[24c]"></a>gc_flash_erase</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, flash_control.o(i.gc_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gc_flash_erase &rArr; SPI_FLASH_SectorErase &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_recent_feature_save
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_next_sector
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_feraseall
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data_before_reset
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_write_data
</UL>

<P><STRONG><a name="[299]"></a>gc_flash_fwrite</STRONG> (Thumb, 48 bytes, Stack size 280 bytes, flash_control.o(i.gc_flash_fwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_recent_feature_save
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data_before_reset
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_write_data
</UL>

<P><STRONG><a name="[21d]"></a>gc_flash_page_read_data</STRONG> (Thumb, 142 bytes, Stack size 296 bytes, flash_control.o(i.gc_flash_page_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = gc_flash_page_read_data &rArr; gc_flash_read &rArr; SPI_FLASH_BufferRead &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_start
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_read
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_getslpinfo
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_info_recall
</UL>

<P><STRONG><a name="[2b6]"></a>gc_flash_page_start</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, flash_control.o(i.gc_flash_page_start))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_read_data
</UL>

<P><STRONG><a name="[21a]"></a>gc_flash_page_write_data</STRONG> (Thumb, 100 bytes, Stack size 280 bytes, flash_control.o(i.gc_flash_page_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = gc_flash_page_write_data &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_flash_page_write_position
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flash_page_write_position
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_fwrite
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_next_sector
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_erase
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_info_before_reset_point
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_info_before_mcu_off
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rcv_rtc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
</UL>

<P><STRONG><a name="[242]"></a>gc_flash_read</STRONG> (Thumb, 32 bytes, Stack size 272 bytes, flash_control.o(i.gc_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = gc_flash_read &rArr; SPI_FLASH_BufferRead &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recall_GMT_offset
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recal_after_reset
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_saved_info
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findpaststartADDR
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_req_feature
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_recent_feature_save
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data_before_reset
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_read_data
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_req_past_feature
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_recent_feature_save_on_boot
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_flash_page_write_position_at_boot
</UL>

<P><STRONG><a name="[2b9]"></a>gc_notification_ancs_handle</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, gc_ble_notification.o(i.gc_notification_ancs_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gc_notification_ancs_handle &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
</UL>

<P><STRONG><a name="[253]"></a>gc_power_off_prepare</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gc_sleep.o(i.gc_power_off_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = gc_power_off_prepare &rArr; reset_prepare &rArr; advertising_stop &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_info_before_mcu_off
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_peripheral_device
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_poweroff
</UL>

<P><STRONG><a name="[2ac]"></a>gc_ppi_gpiote_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.gc_ppi_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gc_ppi_gpiote_init &rArr; nrf_drv_gpiote_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_initialize
</UL>

<P><STRONG><a name="[21e]"></a>gc_protocol_ctrl_pah8002</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, pah8002.o(i.gc_protocol_ctrl_pah8002))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_timer_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_opmode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_hwtest
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_log_Greencomm
</UL>

<P><STRONG><a name="[2ae]"></a>gc_spi_flash_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, spi_flash.o(i.gc_spi_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = gc_spi_flash_init &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_initialize
</UL>

<P><STRONG><a name="[2ad]"></a>gc_spi_pah8002_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_pah8002.o(i.gc_spi_pah8002_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = gc_spi_pah8002_init &rArr; config_gpio_pah8002 &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_pah8002_master_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gpio_pah8002
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_initialize
</UL>

<P><STRONG><a name="[2af]"></a>gc_twi_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, main.o(i.gc_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = gc_twi_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_enable
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_initialize
</UL>

<P><STRONG><a name="[13d]"></a>get_GMT</STRONG> (Thumb, 128 bytes, Stack size 36 bytes, gc_activity.o(i.get_GMT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_GMT
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recal_after_reset
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_gmt_to_display_time
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_clock
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_info_recall
</UL>

<P><STRONG><a name="[1ee]"></a>get_battery_level</STRONG> (Thumb, 878 bytes, Stack size 0 bytes, gc_saadc.o(i.get_battery_level))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_meas_timeout_handler
</UL>

<P><STRONG><a name="[2b7]"></a>get_flash_page_write_position</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, flash_control.o(i.get_flash_page_write_position))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_write_data
</UL>

<P><STRONG><a name="[2c4]"></a>get_month_day</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gc_activity.o(i.get_month_day))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_month_day
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_from_GMT
</UL>

<P><STRONG><a name="[380]"></a>get_realtime_HR</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, gc_activity.o(i.get_realtime_HR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_realtime_HR
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_timer_handler
</UL>

<P><STRONG><a name="[2c5]"></a>get_realtime_step</STRONG> (Thumb, 6522 bytes, Stack size 392 bytes, gc_activity.o(i.get_realtime_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = get_realtime_step &rArr; find_recent_feature_save &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_recent_feature_save
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_GMT
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_write_data
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_gmt_to_display_time
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixFloat
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greencom_step_process
</UL>

<P><STRONG><a name="[276]"></a>get_sys_tick</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.get_sys_tick))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_task
</UL>

<P><STRONG><a name="[13a]"></a>get_time</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, gc_time.o(i.get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = get_time &rArr; rtc_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Bin
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recal_after_reset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_info_before_reset_point
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data_before_reset
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_info_before_mcu_off
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_clock
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_info_recall
</UL>

<P><STRONG><a name="[26b]"></a>get_time_from_GMT</STRONG> (Thumb, 188 bytes, Stack size 28 bytes, gc_activity.o(i.get_time_from_GMT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_time_from_GMT &rArr; get_month_day
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_leap_year
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_month_day
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_gmt_to_display_time
</UL>

<P><STRONG><a name="[39]"></a>gpiote_acc_intr_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.gpiote_acc_intr_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.accelerator_sensor_init)
</UL>
<P><STRONG><a name="[47]"></a>gpiote_battery_sense_evt_handler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gc_saadc.o(i.gpiote_battery_sense_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpiote_battery_sense_evt_handler &rArr; app_uart_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gc_saadc.o(i.init_battery_sense_event)
</UL>
<P><STRONG><a name="[3f]"></a>gpiote_in_evt_handler</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, spi_pah8002.o(i.gpiote_in_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpiote_in_evt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_intr_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_pah8002.o(i.config_gpio_pah8002)
</UL>
<P><STRONG><a name="[2ca]"></a>greencom_step_process</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gc_activity.o(i.greencom_step_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = greencom_step_process &rArr; get_realtime_step &rArr; find_recent_feature_save &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_timer_handler
</UL>

<P><STRONG><a name="[105]"></a>hpf20hz_fixed_c</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, filter8002_fixed.o(i.hpf20hz_fixed_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hpf20hz_fixed_c &rArr; filter_common
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_common
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[118]"></a>hpf20hz_fixed_c_initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, filter8002_fixed.o(i.hpf20hz_fixed_c_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Reset
</UL>

<P><STRONG><a name="[106]"></a>hpf_20hz_5_fixed_c</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, filter8002_fixed.o(i.hpf_20hz_5_fixed_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hpf_20hz_5_fixed_c &rArr; filter_common
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_common
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[115]"></a>hpf_20hz_5_fixed_c_initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, filter8002_fixed.o(i.hpf_20hz_5_fixed_c_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Reset
</UL>

<P><STRONG><a name="[2cc]"></a>hr_power_enable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.hr_power_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hr_power_enable &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24a]"></a>i2c_read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, an520.o(i.i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = i2c_read &rArr; nrf_drv_twi_rx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_prom
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_adc
</UL>

<P><STRONG><a name="[a4]"></a>i2c_send</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, an520.o(i.i2c_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = i2c_send &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN520cmd_reset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_prom
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_adc
</UL>

<P><STRONG><a name="[4c]"></a>in_pin_handler</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, spi_flash.o(i.in_pin_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = in_pin_handler &rArr; nrf_drv_gpiote_out_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash.o(i.spi_send_recv)
</UL>
<P><STRONG><a name="[2b2]"></a>init_battery_sense_event</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gc_saadc.o(i.init_battery_sense_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = init_battery_sense_event &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_initialize
</UL>

<P><STRONG><a name="[2b1]"></a>init_rtc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rtc.o(i.init_rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = init_rtc &rArr; rtc_i2c_write &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_i2c_write
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_i2c_read
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_initialize
</UL>

<P><STRONG><a name="[168]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = intern_softdevice_events_execute &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[2c3]"></a>is_leap_year</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gc_activity.o(i.is_leap_year))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_GMT
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_from_GMT
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_month_day
</UL>

<P><STRONG><a name="[274]"></a>ks_get_command</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, command.o(i.ks_get_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ks_get_command &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_shell
</UL>

<P><STRONG><a name="[2dc]"></a>log_uart_write_string</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_log.o(i.log_uart_write_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = log_uart_write_string &rArr; app_uart_put &rArr; app_fifo_get &rArr; fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_write_string_many
</UL>

<P><STRONG><a name="[1df]"></a>log_uart_write_string_many</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, nrf_log.o(i.log_uart_write_string_many))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = log_uart_write_string_many &rArr; log_uart_write_string &rArr; app_uart_put &rArr; app_fifo_get &rArr; fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_write_string
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_notification_setup
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[107]"></a>lpf20hz_fixed_c</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, filter8002_fixed.o(i.lpf20hz_fixed_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lpf20hz_fixed_c &rArr; filter_common
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_common
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[117]"></a>lpf20hz_fixed_c_initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, filter8002_fixed.o(i.lpf20hz_fixed_c_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Reset
</UL>

<P><STRONG><a name="[104]"></a>lpf_20hz_6hz_fixed_c</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, filter8002_fixed.o(i.lpf_20hz_6hz_fixed_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lpf_20hz_6hz_fixed_c &rArr; filter_common
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_common
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Process
</UL>

<P><STRONG><a name="[116]"></a>lpf_20hz_6hz_fixed_c_initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, filter8002_fixed.o(i.lpf_20hz_6hz_fixed_c_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Reset
</UL>

<P><STRONG><a name="[31]"></a>main</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = main &rArr; advertising_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN520cmd_reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN520_crc_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recall_GMT_offset
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recal_after_reset
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_power_enable
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_initialize
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_gpio_set
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_discovery_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_timers_start
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_deinit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_recent_feature_save_on_boot
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[339]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_init
</UL>

<P><STRONG><a name="[2b8]"></a>move_flash_page_write_position</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, flash_control.o(i.move_flash_page_write_position))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_write_data
</UL>

<P><STRONG><a name="[a5]"></a>nrf_delay_ms</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_delay.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN520cmd_reset
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_power_enable
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_gpio_set
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_notification_setup
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_recent_feature_save
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset_boot
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_hwtest
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_feraseall
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ferase
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data_before_reset
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_write_data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_poweroff
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Power
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_disable_pah8002
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_step
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_info_recall
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_adc
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA2x2_delay_msek
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gpio_pah8002
</UL>

<P><STRONG><a name="[2f3]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[2e5]"></a>nrf_drv_gpiote_in_event_addr_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_gpiote_in_event_addr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
</UL>

<P><STRONG><a name="[2e7]"></a>nrf_drv_gpiote_in_event_disable</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_gpiote_in_event_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_uninit
</UL>

<P><STRONG><a name="[1a1]"></a>nrf_drv_gpiote_in_event_enable</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerator_sensor_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_battery_sense_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gpio_pah8002
</UL>

<P><STRONG><a name="[1a0]"></a>nrf_drv_gpiote_in_init</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerator_sensor_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_battery_sense_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gpio_pah8002
</UL>

<P><STRONG><a name="[2ee]"></a>nrf_drv_gpiote_in_uninit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrf_drv_gpiote_in_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_clear
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_te_default
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
</UL>

<P><STRONG><a name="[2be]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_gpiote_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_clear
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_ppi_gpiote_init
</UL>

<P><STRONG><a name="[386]"></a>nrf_drv_gpiote_out_task_disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_task_disable))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
</UL>

<P><STRONG><a name="[2cd]"></a>nrf_drv_gpiote_out_toggle</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_gpiote_out_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_pin_handler
</UL>

<P><STRONG><a name="[2f4]"></a>nrf_drv_ppi_channel_alloc</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_ppi_channel_alloc &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_to_mask
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
</UL>

<P><STRONG><a name="[2f5]"></a>nrf_drv_ppi_channel_assign</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_ppi_channel_assign &rArr; is_programmable_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
</UL>

<P><STRONG><a name="[2f6]"></a>nrf_drv_ppi_channel_disable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ppi_channel_disable
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
</UL>

<P><STRONG><a name="[2f8]"></a>nrf_drv_ppi_channel_enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_ppi_channel_enable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
</UL>

<P><STRONG><a name="[2f9]"></a>nrf_drv_ppi_channel_free</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_ppi_channel_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ppi_channel_disable
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_to_mask
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
</UL>

<P><STRONG><a name="[2bd]"></a>nrf_drv_ppi_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_init))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_ppi_gpiote_init
</UL>

<P><STRONG><a name="[154]"></a>nrf_drv_saadc_buffer_convert</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_buffer_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_saadc_buffer_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_enable
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_disable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[2bf]"></a>nrf_drv_spi_init</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_int_enable
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_spi_flash_init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_pah8002_master_init
</UL>

<P><STRONG><a name="[300]"></a>nrf_drv_spi_transfer</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, nrf_drv_spi.o(i.nrf_drv_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_burst_read_reg
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_recv
</UL>

<P><STRONG><a name="[2b5]"></a>nrf_drv_spi_uninit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_drv_spi_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_spi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_task_trigger
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_int_disable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_disable_pah8002
</UL>

<P><STRONG><a name="[301]"></a>nrf_drv_spi_xfer</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.nrf_drv_spi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>

<P><STRONG><a name="[2c2]"></a>nrf_drv_twi_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_drv_twi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_twi_init
</UL>

<P><STRONG><a name="[2c1]"></a>nrf_drv_twi_init</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, nrf_drv_twi.o(i.nrf_drv_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_twi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_get_IRQn
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_twi_init
</UL>

<P><STRONG><a name="[ad]"></a>nrf_drv_twi_rx</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, nrf_drv_twi.o(i.nrf_drv_twi_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = nrf_drv_twi_rx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_i2c_read
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA2x2_I2C_bus_read
</UL>

<P><STRONG><a name="[ac]"></a>nrf_drv_twi_tx</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, nrf_drv_twi.o(i.nrf_drv_twi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_i2c_write
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_i2c_read
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA2x2_I2C_bus_write
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA2x2_I2C_bus_read
</UL>

<P><STRONG><a name="[307]"></a>nrf_drv_twi_xfer</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>

<P><STRONG><a name="[1d2]"></a>nrf_drv_uart_init</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_enable
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[1cf]"></a>nrf_drv_uart_rx</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_enable
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_disable
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uarte
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[1d3]"></a>nrf_drv_uart_rx_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_uart_rx_enable &rArr; rx_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[1d6]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_uart_tx &rArr; nrf_drv_uart_tx_for_uarte
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uarte
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[1d5]"></a>nrf_drv_uart_tx_in_progress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[1e9]"></a>nrf_saadc_channel_init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, nrf_saadc.o(i.nrf_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_saadc_channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_meas_timeout_handler
</UL>

<P><STRONG><a name="[2b0]"></a>oled_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.oled_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = oled_init &rArr; OLED_Power &rArr; OLED_Clear &rArr; OLED_Clear_Line &rArr; OLED_Write_Data &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Power
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_OLED_PORT
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_initialize
</UL>

<P><STRONG><a name="[3a]"></a>on_adv_evt</STRONG> (Thumb, 218 bytes, Stack size 96 bytes, main.o(i.on_adv_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = on_adv_evt &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_whitelist_create
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_whitelist_reply
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.advertising_init)
</UL>
<P><STRONG><a name="[49]"></a>on_ancs_c_evt</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, main.o(i.on_ancs_c_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = on_ancs_c_evt &rArr; apple_notification_setup &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_notification_setup
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_write_string_many
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_notification_ancs_handle
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_handles_assign
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[192]"></a>pah8002_burst_read_reg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pah8002_comm_spi.o(i.pah8002_burst_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pah8002_burst_read_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_bank
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pah8002_task
</UL>

<P><STRONG><a name="[324]"></a>pah8002_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pah8002_api.o(i.pah8002_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pah8002_close &rArr; pah8series_close &rArr; pah8series_hr_close
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_deinit
</UL>

<P><STRONG><a name="[2b4]"></a>pah8002_deinit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pah8002.o(i.pah8002_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pah8002_deinit &rArr; pah8002_enter_suspend_mode &rArr; pah8002_sw_reset &rArr; pah8002_wakeup &rArr; pah8002_read_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_suspend_mode
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_close
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_disable_pah8002
</UL>

<P><STRONG><a name="[32d]"></a>pah8002_enter_normal_mode</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, pah8002.o(i.pah8002_enter_normal_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pah8002_enter_normal_mode &rArr; pah8002_start &rArr; pah8002_wakeup &rArr; pah8002_read_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_read_reg
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_write_reg
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_sw_reset
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_start
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_normal_mode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_task
</UL>

<P><STRONG><a name="[326]"></a>pah8002_enter_suspend_mode</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pah8002.o(i.pah8002_enter_suspend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pah8002_enter_suspend_mode &rArr; pah8002_sw_reset &rArr; pah8002_wakeup &rArr; pah8002_read_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_write_reg
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_sw_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_deinit
</UL>

<P><STRONG><a name="[32f]"></a>pah8002_enter_touch_mode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pah8002.o(i.pah8002_enter_touch_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pah8002_enter_touch_mode &rArr; pah8002_start &rArr; pah8002_wakeup &rArr; pah8002_read_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_touch_mode_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_sw_reset
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_start
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_task
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_init
</UL>

<P><STRONG><a name="[331]"></a>pah8002_entrance</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pah8002_api.o(i.pah8002_entrance))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = pah8002_entrance &rArr; pah8series_entrance &rArr; pah8series_hr_entrance &rArr; HR8002_Entrance &rArr; HR8002_CoroEntrance &rArr; HR8002_Detect_Process &rArr; HR8002_Process &rArr; Cal_Hr &rArr; Cal_Hr_Motion &rArr; Dynamic_Hr_Model &rArr; Local_Peak_Dy_Hr_Model_Chk &rArr; Peak_Idx_Mask &rArr; Check_Harmonic
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_entrance
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_task
</UL>

<P><STRONG><a name="[333]"></a>pah8002_get_hr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pah8002_api.o(i.pah8002_get_hr))
<BR><BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_get_hr
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_task
</UL>

<P><STRONG><a name="[335]"></a>pah8002_get_hr_trust_level</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pah8002_api.o(i.pah8002_get_hr_trust_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pah8002_get_hr_trust_level &rArr; pah8series_get_hr_trust_level &rArr; pah8series_hr_get_hr_trust_level
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_get_hr_trust_level
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_task
</UL>

<P><STRONG><a name="[337]"></a>pah8002_get_touch_flag</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pah8002.o(i.pah8002_get_touch_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pah8002_get_touch_flag &rArr; pah8002_wakeup &rArr; pah8002_read_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_read_reg
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_write_reg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_task
</UL>

<P><STRONG><a name="[2e3]"></a>pah8002_init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, pah8002.o(i.pah8002_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pah8002_init &rArr; pah8002_enter_touch_mode &rArr; pah8002_start &rArr; pah8002_wakeup &rArr; pah8002_read_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_set_param
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_query_open_size
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_open
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_touch_mode
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c9]"></a>pah8002_intr_isr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pah8002.o(i.pah8002_intr_isr))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_in_evt_handler
</UL>

<P><STRONG><a name="[33c]"></a>pah8002_log_Greencomm</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, pah8002.o(i.pah8002_log_Greencomm))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pah8002_log_Greencomm &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_protocol_ctrl_pah8002
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_task
</UL>

<P><STRONG><a name="[33a]"></a>pah8002_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pah8002_api.o(i.pah8002_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pah8002_open &rArr; pah8series_open &rArr; pah8series_hr_open &rArr; HR8002_Detect_Open &rArr; HR8002_Reset &rArr; HR8002_Set_PPG_Ch_Num_Is_IR
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_open
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_init
</UL>

<P><STRONG><a name="[338]"></a>pah8002_query_open_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pah8002_api.o(i.pah8002_query_open_size))
<BR><BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_query_open_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_init
</UL>

<P><STRONG><a name="[191]"></a>pah8002_read_reg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pah8002_comm_spi.o(i.pah8002_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pah8002_read_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_bank
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_hwtest
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_normal_mode
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_get_touch_flag
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pah8002_task
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_wakeup
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_sw_reset
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_start
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_normal_long_et_mode
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_dyn_switch_ppg_mode
</UL>

<P><STRONG><a name="[33b]"></a>pah8002_set_param</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pah8002_api.o(i.pah8002_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pah8002_set_param &rArr; pah8series_set_param &rArr; pah8series_hr_set_param &rArr; HR8002_Set_PPG_Ch_Num_Is_IR
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_set_param
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_init
</UL>

<P><STRONG><a name="[340]"></a>pah8002_task</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, pah8002.o(i.pah8002_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = pah8002_task &rArr; pah8002_entrance &rArr; pah8series_entrance &rArr; pah8series_hr_entrance &rArr; HR8002_Entrance &rArr; HR8002_CoroEntrance &rArr; HR8002_Detect_Process &rArr; HR8002_Process &rArr; Cal_Hr &rArr; Cal_Hr_Motion &rArr; Dynamic_Hr_Model &rArr; Local_Peak_Dy_Hr_Model_Chk &rArr; Peak_Idx_Mask &rArr; Check_Harmonic
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_tick
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_normal_mode
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_get_fifo
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_get_hr_trust_level
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_get_hr
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_entrance
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_log_Greencomm
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_get_touch_flag
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_touch_mode
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pah8002_task
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_dyn_switch_ppg_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_timer_handler
</UL>

<P><STRONG><a name="[190]"></a>pah8002_write_reg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pah8002_comm_spi.o(i.pah8002_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pah8002_write_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_reg
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_suspend_mode
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_normal_mode
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_get_touch_flag
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pah8002_task
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_wakeup
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_touch_mode_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_sw_reset
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_start
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_normal_mode_init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_normal_long_et_mode_init
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_normal_long_et_mode
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_dyn_switch_ppg_mode
</UL>

<P><STRONG><a name="[325]"></a>pah8series_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pah8002_api.o(i.pah8series_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pah8series_close &rArr; pah8series_hr_close
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_close
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_close
</UL>

<P><STRONG><a name="[332]"></a>pah8series_entrance</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pah8002_api.o(i.pah8series_entrance))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = pah8series_entrance &rArr; pah8series_hr_entrance &rArr; HR8002_Entrance &rArr; HR8002_CoroEntrance &rArr; HR8002_Detect_Process &rArr; HR8002_Process &rArr; Cal_Hr &rArr; Cal_Hr_Motion &rArr; Dynamic_Hr_Model &rArr; Local_Peak_Dy_Hr_Model_Chk &rArr; Peak_Idx_Mask &rArr; Check_Harmonic
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_entrance
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_entrance
</UL>

<P><STRONG><a name="[334]"></a>pah8series_get_hr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pah8002_api.o(i.pah8series_get_hr))
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_get_hr
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_get_hr
</UL>

<P><STRONG><a name="[336]"></a>pah8series_get_hr_trust_level</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pah8002_api.o(i.pah8series_get_hr_trust_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pah8series_get_hr_trust_level &rArr; pah8series_hr_get_hr_trust_level
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_get_hr_trust_level
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_get_hr_trust_level
</UL>

<P><STRONG><a name="[342]"></a>pah8series_hr_close</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pah8series_hr.o(i.pah8series_hr_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pah8series_hr_close
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Detect_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_close
</UL>

<P><STRONG><a name="[343]"></a>pah8series_hr_entrance</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, pah8series_hr.o(i.pah8series_hr_entrance))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = pah8series_hr_entrance &rArr; HR8002_Entrance &rArr; HR8002_CoroEntrance &rArr; HR8002_Detect_Process &rArr; HR8002_Process &rArr; Cal_Hr &rArr; Cal_Hr_Motion &rArr; Dynamic_Hr_Model &rArr; Local_Peak_Dy_Hr_Model_Chk &rArr; Peak_Idx_Mask &rArr; Check_Harmonic
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Entrance
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pah8series_hr_entrance_check
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_entrance
</UL>

<P><STRONG><a name="[344]"></a>pah8series_hr_get_hr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pah8series_hr.o(i.pah8series_hr_get_hr))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_get_hr
</UL>

<P><STRONG><a name="[345]"></a>pah8series_hr_get_hr_trust_level</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pah8series_hr.o(i.pah8series_hr_get_hr_trust_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pah8series_hr_get_hr_trust_level
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Get_HR_Trust_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_get_hr_trust_level
</UL>

<P><STRONG><a name="[348]"></a>pah8series_hr_open</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pah8series_hr.o(i.pah8series_hr_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pah8series_hr_open &rArr; HR8002_Detect_Open &rArr; HR8002_Reset &rArr; HR8002_Set_PPG_Ch_Num_Is_IR
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Detect_Open
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_open
</UL>

<P><STRONG><a name="[33e]"></a>pah8series_hr_query_open_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pah8series_hr.o(i.pah8series_hr_query_open_size))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_query_open_size
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_open
</UL>

<P><STRONG><a name="[349]"></a>pah8series_hr_set_param</STRONG> (Thumb, 662 bytes, Stack size 8 bytes, pah8series_hr.o(i.pah8series_hr_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pah8series_hr_set_param &rArr; HR8002_Set_PPG_Ch_Num_Is_IR
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Walk_Hr_Up_Idx
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Walk_Hr_Dn_Idx
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Static_Mode
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Static_HR_UP_IDX
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Static_HR_DN_IDX
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Signal_Grade
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Sample_Rate
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Ppg_Normalize_len
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Ppg_Diff_Normalize_len
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_PPG_IsAuto_IsTag_Is8002Pattern
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_PPG_Ch_Num_Is_IR
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Non_Motion_First_Peak_Alive_Frm_Thr
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Local_First_Peak_Frm_Alive_Thr
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Init_Walk_Hr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_IIR_Smooth_Pred
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_IIR_LP
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Hr_Too_Low_Idx
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Hr_Model_Time_Const
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Hr_Model_Progress_Ratio
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Hr_In_Motion_Search_St
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Hr_In_Motion_Search_End
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Gsensor_Mode
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Global_First_Peak_Frm_Alive_Thr
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_First_Hr_in_Motion_Flag
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_First_Hr_Ppg_Quality_Thr
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_First_Hr_Multiple_Offset_Mems_Thr
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_First_Hr_Mems_Quality_Thr
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_First_Hr_Half_1x_Energy_Thr
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_First_Hr_6s
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_En_Split_Motion_Peak
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_En_Post_Hr_Process
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_En_Nor_Pre_Diff_Nor
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_En_Non_Motion_First_Peak_Track
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_En_MA_Walk
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_En_Local_First_Peak_Track
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_En_LWPS
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_En_Judge_Walk
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_En_Hi_Quality_Hr_Jmp
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_En_Hand_Clap
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_En_Half_Hr_Chk
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_En_Global_First_Peak_Track
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_En_Force_Hr_Out_in10s
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_En_Chk_Hr_Gt_Motion
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_En_Chk_Hq_3x_ppg
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Set_Default_Hr_Out_in10s
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_set_param
</UL>

<P><STRONG><a name="[33d]"></a>pah8series_open</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, pah8002_api.o(i.pah8series_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pah8series_open &rArr; pah8series_hr_open &rArr; HR8002_Detect_Open &rArr; HR8002_Reset &rArr; HR8002_Set_PPG_Ch_Num_Is_IR
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_query_open_size
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_open
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_open
</UL>

<P><STRONG><a name="[33f]"></a>pah8series_set_param</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pah8002_api.o(i.pah8series_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pah8series_set_param &rArr; pah8series_hr_set_param &rArr; HR8002_Set_PPG_Ch_Num_Is_IR
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_set_param
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_set_param
</UL>

<P><STRONG><a name="[2bc]"></a>power_off_peripheral_device</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gc_sleep.o(i.power_off_peripheral_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = power_off_peripheral_device &rArr; OLED_Write_Command &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Command
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_disable_pah8002
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_power_off_prepare
</UL>

<P><STRONG><a name="[29e]"></a>pstorage_access_status_get</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_access_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
</UL>

<P><STRONG><a name="[239]"></a>pstorage_block_identifier_get</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_block_identifier_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_context_store
</UL>

<P><STRONG><a name="[27d]"></a>pstorage_clear</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, pstorage.o(i.pstorage_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
</UL>

<P><STRONG><a name="[281]"></a>pstorage_init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, pstorage.o(i.pstorage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pstorage_init &rArr; pstorage_flash_page_end
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
</UL>

<P><STRONG><a name="[23a]"></a>pstorage_load</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_load
</UL>

<P><STRONG><a name="[28d]"></a>pstorage_register</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pstorage_register &rArr; pstorage_flash_page_end
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
</UL>

<P><STRONG><a name="[43]"></a>pstorage_store</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pstorage_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Address Reference Count : 2]<UL><LI> device_manager_peripheral.o(i.gatts_context_store)
<LI> device_manager_peripheral.o(i.device_context_store)
</UL>
<P><STRONG><a name="[37a]"></a>pstorage_sys_event_handler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pstorage.o(i.pstorage_sys_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pstorage_sys_event_handler &rArr; flash_operation_success_run &rArr; erase_sub_state_sm_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_failure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[42]"></a>pstorage_update</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pstorage_update &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Address Reference Count : 2]<UL><LI> device_manager_peripheral.o(i.gatts_context_store)
<LI> device_manager_peripheral.o(i.device_context_store)
</UL>
<P><STRONG><a name="[2df]"></a>recal_after_reset</STRONG> (Thumb, 342 bytes, Stack size 384 bytes, main.o(i.recal_after_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = recal_after_reset &rArr; gc_flash_read &rArr; SPI_FLASH_BufferRead &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_GMT
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_read
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_gmt_to_display_time
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>recall_GMT_offset</STRONG> (Thumb, 60 bytes, Stack size 264 bytes, main.o(i.recall_GMT_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = recall_GMT_offset &rArr; gc_flash_read &rArr; SPI_FLASH_BufferRead &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_read
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_initialize
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_clock
</UL>

<P><STRONG><a name="[2ba]"></a>reset_prepare</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, main.o(i.reset_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = reset_prepare &rArr; advertising_stop &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_stop
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_stop
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_power_off_prepare
</UL>

<P><STRONG><a name="[24f]"></a>rtc_i2c_read</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rtc.o(i.rtc_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rtc_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_hwtest
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>

<P><STRONG><a name="[24e]"></a>rtc_i2c_write</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, rtc.o(i.rtc_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rtc_i2c_write &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_hwtest
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
</UL>

<P><STRONG><a name="[219]"></a>rtc_set_time</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, rtc.o(i.rtc_set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rtc_set_time &rArr; rtc_i2c_write &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_i2c_write
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bin2Bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rcv_rtc
</UL>

<P><STRONG><a name="[2de]"></a>saadc_init</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, gc_saadc.o(i.saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = saadc_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battery_level
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_enable_check
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>save_data_before_reset</STRONG> (Thumb, 258 bytes, Stack size 696 bytes, gc_sleep.o(i.save_data_before_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_fwrite
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_erase
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_read
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_gmt_to_display_time
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset_boot
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2bb]"></a>save_info_before_mcu_off</STRONG> (Thumb, 126 bytes, Stack size 304 bytes, gc_sleep.o(i.save_info_before_mcu_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = save_info_before_mcu_off &rArr; gc_flash_page_write_data &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_write_data
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_gmt_to_display_time
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_power_off_prepare
</UL>

<P><STRONG><a name="[171]"></a>save_info_before_reset_point</STRONG> (Thumb, 154 bytes, Stack size 344 bytes, gc_sleep.o(i.save_info_before_reset_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = save_info_before_reset_point &rArr; gc_flash_page_write_data &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_flash_page_write_data
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_gmt_to_display_time
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset_boot
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[226]"></a>sd_check_ram_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, softdevice_handler.o(i.sd_check_ram_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_check_ram_start
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[228]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_ble_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[227]"></a>softdevice_enable</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, softdevice_handler.o(i.softdevice_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = softdevice_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[225]"></a>softdevice_enable_get_default_config</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_enable_get_default_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_enable_get_default_config
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[4b]"></a>softdevice_fault_handler</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = softdevice_fault_handler &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(i.softdevice_handler_init)
</UL>
<P><STRONG><a name="[224]"></a>softdevice_handler_init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, softdevice_handler.o(i.softdevice_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = softdevice_handler_init &rArr; sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[229]"></a>softdevice_sys_evt_handler_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_sys_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[19a]"></a>spi_burst_read_reg</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, pah8002_comm_spi.o(i.spi_burst_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = spi_burst_read_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_reg
</UL>

<P><STRONG><a name="[2c0]"></a>spi_pah8002_master_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, spi_pah8002.o(i.spi_pah8002_master_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = spi_pah8002_master_init &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_spi_pah8002_init
</UL>

<P><STRONG><a name="[162]"></a>spi_send_recv</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, spi_flash.o(i.spi_send_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_disable
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_uninit
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_addr_get
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
</UL>

<P><STRONG><a name="[19d]"></a>spi_write_reg</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, pah8002_comm_spi.o(i.spi_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_reg
</UL>

<P><STRONG><a name="[182]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[25d]"></a>strncmpi</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, command.o(i.strncmpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmpi
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_execute
</UL>

<P><STRONG><a name="[38d]"></a>tolower</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, command.o(i.tolower))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmpi
</UL>

<P><STRONG><a name="[50]"></a>uart_event_handle</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, main.o(i.uart_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = uart_event_handle &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_shell
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.uart_init)
</UL>
<P><STRONG><a name="[382]"></a>update_accelerometer_buffer</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, gc_util.o(i.update_accelerometer_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = update_accelerometer_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_timer_handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1b4]"></a>advertising_stop</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(i.advertising_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = advertising_stop &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
</UL>

<P><STRONG><a name="[1e0]"></a>application_timers_start</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, main.o(i.application_timers_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = application_timers_start &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>ble_evt_dispatch</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, main.o(i.ble_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = ble_evt_dispatch &rArr; dm_ble_evt_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_on_ble_evt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_on_ble_evt
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[223]"></a>ble_stack_init</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, main.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = ble_stack_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_sys_evt_handler_set
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_check_ram_start
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>conn_params_error_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.conn_params_error_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.conn_params_init)
</UL>
<P><STRONG><a name="[268]"></a>conn_params_init</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, main.o(i.conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = conn_params_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[271]"></a>db_discovery_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(i.db_discovery_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = db_discovery_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>device_manager_evt_handler</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, main.o(i.device_manager_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = device_manager_evt_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_start
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.device_manager_init)
</UL>
<P><STRONG><a name="[280]"></a>device_manager_init</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, main.o(i.device_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = device_manager_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_register
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a7]"></a>gap_params_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, main.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = gap_params_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31a]"></a>nrf_gpio_cfg</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, main.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[19f]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, main.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_gpio_set
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerator_sensor_init
</UL>

<P><STRONG><a name="[2a9]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_power_enable
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_gpio_set
</UL>

<P><STRONG><a name="[2aa]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_power_enable
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_gpio_set
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_timer_handler
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[243]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_power_enable
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_dev_gpio_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_saved_info
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_timer_handler
</UL>

<P><STRONG><a name="[48]"></a>nus_data_handler</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, main.o(i.nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992<LI>Call Chain = nus_data_handler &rArr; ble_receive_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data_before_reset
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[211]"></a>on_ble_evt</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, main.o(i.on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = on_ble_evt &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_write_string_many
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[2e4]"></a>power_manage</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main.o(i.power_manage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = power_manage &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e0]"></a>scheduler_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(i.scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = scheduler_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>sec_req_timeout_handler</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, main.o(i.sec_req_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = sec_req_timeout_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_security_status_req
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_security_setup_req
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.timers_init)
</UL>
<P><STRONG><a name="[4d]"></a>sensor_timer_handler</STRONG> (Thumb, 890 bytes, Stack size 16 bytes, main.o(i.sensor_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = sensor_timer_handler &rArr; ble_receive_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AN520_Result
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_send_rawdata
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_send_featuredata
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_accelerometer_buffer
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_task
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greencom_step_process
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_realtime_HR
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_protocol_ctrl_pah8002
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calorie
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma2x2_read_accel_xyz
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_receive_handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_flush
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_intensity
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.timers_init)
</UL>
<P><STRONG><a name="[2e1]"></a>services_init</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, main.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = services_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_init
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_attr_add
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>sys_evt_dispatch</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.sys_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sys_evt_dispatch &rArr; ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[2e2]"></a>timers_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, main.o(i.timers_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = timers_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2dd]"></a>uart_init</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, main.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = uart_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25a]"></a>NVIC_SystemReset</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, command.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset_boot
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
</UL>

<P><STRONG><a name="[250]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, command.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_hwtest
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_poweroff
</UL>

<P><STRONG><a name="[146]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, display.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
</UL>

<P><STRONG><a name="[14c]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, display.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_display
</UL>

<P><STRONG><a name="[1ea]"></a>nrf_saadc_buffer_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gc_saadc.o(i.nrf_saadc_buffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_meas_timeout_handler
</UL>

<P><STRONG><a name="[37c]"></a>nrf_saadc_enable_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gc_saadc.o(i.nrf_saadc_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
</UL>

<P><STRONG><a name="[1ec]"></a>nrf_saadc_event_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gc_saadc.o(i.nrf_saadc_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_meas_timeout_handler
</UL>

<P><STRONG><a name="[1ed]"></a>nrf_saadc_event_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gc_saadc.o(i.nrf_saadc_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_meas_timeout_handler
</UL>

<P><STRONG><a name="[1eb]"></a>nrf_saadc_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gc_saadc.o(i.nrf_saadc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_meas_timeout_handler
</UL>

<P><STRONG><a name="[5f]"></a>bsp_button_event_handler</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, bsp.o(i.bsp_button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bsp_button_event_handler &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[23c]"></a>bsp_led_indication</STRONG> (Thumb, 1414 bytes, Stack size 24 bytes, bsp.o(i.bsp_led_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
</UL>

<P><STRONG><a name="[1b0]"></a>advertising_buttons_configure</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.advertising_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_on_ble_evt
</UL>

<P><STRONG><a name="[23b]"></a>connection_buttons_configure</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.connection_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = connection_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_on_ble_evt
</UL>

<P><STRONG><a name="[1f0]"></a>advdata_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advdata.o(i.advdata_check))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[1a8]"></a>appearance_encode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_advdata.o(i.appearance_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = appearance_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[1a7]"></a>ble_device_addr_encode</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[267]"></a>conn_int_check</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ble_advdata.o(i.conn_int_check))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[1ac]"></a>conn_int_encode</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[1a9]"></a>flags_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.flags_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flags_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[1a6]"></a>le_role_encode</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, ble_advdata.o(i.le_role_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = le_role_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[1ad]"></a>manuf_specific_data_encode</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = manuf_specific_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[1af]"></a>name_encode</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[1a4]"></a>sec_mgr_oob_flags_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.sec_mgr_oob_flags_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sec_mgr_oob_flags_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[1ae]"></a>service_data_encode</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = service_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[1f1]"></a>srdata_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_advdata.o(i.srdata_check))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[1a5]"></a>tk_value_encode</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_advdata.o(i.tk_value_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tk_value_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[1aa]"></a>tx_power_level_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.tx_power_level_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tx_power_level_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[1db]"></a>uint16_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>

<P><STRONG><a name="[1ab]"></a>uuid_list_encode</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[3a6]"></a>uuid_list_sized_encode</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[1f2]"></a>ble_advertising_peer_address_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_advertising.o(i.ble_advertising_peer_address_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[1f6]"></a>flash_access_in_progress</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ble_advertising.o(i.flash_access_in_progress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_access_in_progress
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_access_status_get
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_queued_op_count_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[1f7]"></a>peer_address_exists</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_advertising.o(i.peer_address_exists))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[1f8]"></a>whitelist_has_entries</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advertising.o(i.whitelist_has_entries))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[269]"></a>conn_params_negotiation</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[26a]"></a>is_conn_params_ok</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[206]"></a>on_conn_params_update</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_params.o(i.on_conn_params_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = on_conn_params_update &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[203]"></a>on_connect</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ble_conn_params.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = on_connect &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[204]"></a>on_disconnect</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = on_disconnect &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[205]"></a>on_write</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[3c]"></a>update_timeout_handler</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[215]"></a>on_connect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_nus.o(i.on_connect))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[216]"></a>on_disconnect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_nus.o(i.on_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[217]"></a>on_write</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ble_nus.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_write
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[213]"></a>rx_char_add</STRONG> (Thumb, 310 bytes, Stack size 72 bytes, ble_nus.o(i.rx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[214]"></a>tx_char_add</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, ble_nus.o(i.tx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[28b]"></a>app_evt_notify</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.app_evt_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_evt_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
</UL>

<P><STRONG><a name="[289]"></a>connection_instance_find</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.connection_instance_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = connection_instance_find
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[28c]"></a>connection_instance_init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.connection_instance_init))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[279]"></a>device_context_store</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, device_manager_peripheral.o(i.device_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = device_context_store &rArr; pstorage_block_identifier_get
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[28a]"></a>device_instance_allocate</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.device_instance_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = device_instance_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[27a]"></a>device_instance_find</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.device_instance_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = device_instance_find &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[27c]"></a>device_instance_free</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.device_instance_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = device_instance_free &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[46]"></a>dm_pstorage_cb_handler</STRONG> (Thumb, 478 bytes, Stack size 120 bytes, device_manager_peripheral.o(i.dm_pstorage_cb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = dm_pstorage_cb_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handle_initialize
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_status_bit_reset
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_evt_notify
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(i.dm_init)
</UL>
<P><STRONG><a name="[6a]"></a>gattc_context_apply</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.gattc_context_apply))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>gattc_context_load</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.gattc_context_load))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>gattc_context_store</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.gattc_context_store))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>gatts_context_apply</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.gatts_context_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gatts_context_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_apply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>gatts_context_load</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.gatts_context_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gatts_context_load &rArr; pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>gatts_context_store</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, device_manager_peripheral.o(i.gatts_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gatts_context_store &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_store
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>gattsc_context_apply</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.gattsc_context_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gattsc_context_apply &rArr; gatts_context_apply
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_apply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>gattsc_context_load</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.gattsc_context_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gattsc_context_load &rArr; gatts_context_load &rArr; pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>gattsc_context_store</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.gattsc_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gattsc_context_store &rArr; gatts_context_store &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>no_service_context_apply</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.no_service_context_apply))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>no_service_context_load</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.no_service_context_load))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>no_service_context_store</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.no_service_context_store))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[27e]"></a>peer_instance_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, device_manager_peripheral.o(i.peer_instance_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = peer_instance_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_status_bit_reset
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
</UL>

<P><STRONG><a name="[44]"></a>storage_operation_dummy_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, device_manager_peripheral.o(i.storage_operation_dummy_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = storage_operation_dummy_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(i.device_context_store)
</UL>
<P><STRONG><a name="[28e]"></a>update_status_bit_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.update_status_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
</UL>

<P><STRONG><a name="[376]"></a>attr_data_parse</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ble_ancs_c.o(i.attr_data_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = attr_data_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_get_notif_attrs_response
</UL>

<P><STRONG><a name="[373]"></a>attr_id_parse</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ble_ancs_c.o(i.attr_id_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = attr_id_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_get_notif_attrs_response
</UL>

<P><STRONG><a name="[374]"></a>attr_len1_parse</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_ancs_c.o(i.attr_len1_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = attr_len1_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_get_notif_attrs_response
</UL>

<P><STRONG><a name="[375]"></a>attr_len2_parse</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ble_ancs_c.o(i.attr_len2_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = attr_len2_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_get_notif_attrs_response
</UL>

<P><STRONG><a name="[377]"></a>ble_ancs_verify_notification_format</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_ancs_c.o(i.ble_ancs_verify_notification_format))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_notif
</UL>

<P><STRONG><a name="[1f9]"></a>cccd_configure</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ble_ancs_c.o(i.cccd_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cccd_configure &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_notif_source_notif_enable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_data_source_notif_enable
</UL>

<P><STRONG><a name="[25e]"></a>command_id_and_notif_parse</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_ancs_c.o(i.command_id_and_notif_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = command_id_and_notif_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_get_notif_attrs_response
</UL>

<P><STRONG><a name="[1ff]"></a>on_disconnected</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_ancs_c.o(i.on_disconnected))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_on_ble_evt
</UL>

<P><STRONG><a name="[1fe]"></a>on_evt_gattc_notif</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ble_ancs_c.o(i.on_evt_gattc_notif))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = on_evt_gattc_notif &rArr; parse_notif
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_notif
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_get_notif_attrs_response
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_on_ble_evt
</UL>

<P><STRONG><a name="[1fd]"></a>on_write_rsp</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ble_ancs_c.o(i.on_write_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = on_write_rsp &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_on_ble_evt
</UL>

<P><STRONG><a name="[323]"></a>parse_get_notif_attrs_response</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ble_ancs_c.o(i.parse_get_notif_attrs_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = parse_get_notif_attrs_response &rArr; command_id_and_notif_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_id_and_notif_parse
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_len2_parse
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_len1_parse
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_id_parse
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_data_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_evt_gattc_notif
</UL>

<P><STRONG><a name="[322]"></a>parse_notif</STRONG> (Thumb, 164 bytes, Stack size 104 bytes, ble_ancs_c.o(i.parse_notif))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = parse_notif
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_decode
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_verify_notification_format
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_evt_gattc_notif
</UL>

<P><STRONG><a name="[240]"></a>tx_buffer_process</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, ble_ancs_c.o(i.tx_buffer_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tx_buffer_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write_rsp
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cccd_configure
</UL>

<P><STRONG><a name="[25f]"></a>uint32_decode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_ancs_c.o(i.uint32_decode))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_notif
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_id_and_notif_parse
</UL>

<P><STRONG><a name="[320]"></a>characteristics_discover</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ble_db_discovery.o(i.characteristics_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = characteristics_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_primary_srv_discovery_rsp
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[277]"></a>descriptors_discover</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, ble_db_discovery.o(i.descriptors_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = descriptors_discover &rArr; is_desc_discovery_reqd
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_desc_discovery_reqd
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[284]"></a>discovery_complete_evt_trigger</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, ble_db_discovery.o(i.discovery_complete_evt_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = discovery_complete_evt_trigger &rArr; pending_user_evts_send
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registered_handler_get
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_user_evts_send
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_primary_srv_discovery_rsp
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[287]"></a>discovery_error_evt_trigger</STRONG> (Thumb, 62 bytes, Stack size 104 bytes, ble_db_discovery.o(i.discovery_error_evt_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = discovery_error_evt_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registered_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_primary_srv_discovery_rsp
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[31f]"></a>is_char_discovery_reqd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ble_db_discovery.o(i.is_char_discovery_reqd))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[278]"></a>is_desc_discovery_reqd</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, ble_db_discovery.o(i.is_desc_discovery_reqd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = is_desc_discovery_reqd
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptors_discover
</UL>

<P><STRONG><a name="[20b]"></a>on_characteristic_discovery_rsp</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, ble_db_discovery.o(i.on_characteristic_discovery_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = on_characteristic_discovery_rsp &rArr; on_srv_disc_completion &rArr; discovery_error_evt_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_char_discovery_reqd
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptors_discover
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristics_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
</UL>

<P><STRONG><a name="[20c]"></a>on_descriptor_discovery_rsp</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ble_db_discovery.o(i.on_descriptor_discovery_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = on_descriptor_discovery_rsp &rArr; on_srv_disc_completion &rArr; discovery_error_evt_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptors_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
</UL>

<P><STRONG><a name="[20d]"></a>on_disconnected</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_db_discovery.o(i.on_disconnected))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
</UL>

<P><STRONG><a name="[20a]"></a>on_primary_srv_discovery_rsp</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ble_db_discovery.o(i.on_primary_srv_discovery_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = on_primary_srv_discovery_rsp &rArr; on_srv_disc_completion &rArr; discovery_error_evt_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristics_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
</UL>

<P><STRONG><a name="[321]"></a>on_srv_disc_completion</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ble_db_discovery.o(i.on_srv_disc_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = on_srv_disc_completion &rArr; discovery_error_evt_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_primary_srv_discovery_rsp
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[286]"></a>pending_user_evts_send</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ble_db_discovery.o(i.pending_user_evts_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pending_user_evts_send
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
</UL>

<P><STRONG><a name="[285]"></a>registered_handler_get</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ble_db_discovery.o(i.registered_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registered_handler_set
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
</UL>

<P><STRONG><a name="[208]"></a>registered_handler_set</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ble_db_discovery.o(i.registered_handler_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = registered_handler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registered_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_evt_register
</UL>

<P><STRONG><a name="[1ce]"></a>fifo_length</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_uart_fifo.o(i.fifo_length))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[3b]"></a>uart_event_handler</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, app_uart_fifo.o(i.uart_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uart_event_handler &rArr; nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart_fifo.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[2f1]"></a>channel_free</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_uninit
</UL>

<P><STRONG><a name="[f5]"></a>channel_handler_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[2ec]"></a>channel_port_alloc</STRONG> (Thumb, 122 bytes, Stack size 36 bytes, nrf_drv_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[f6]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_uninit
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_addr_get
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[2ed]"></a>nrf_gpio_cfg</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[2f0]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_uninit
</UL>

<P><STRONG><a name="[f7]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[2e6]"></a>nrf_gpiote_event_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_addr_get
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[f4]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[2ea]"></a>nrf_gpiote_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[2ef]"></a>nrf_gpiote_te_default</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_te_default))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_uninit
</UL>

<P><STRONG><a name="[2eb]"></a>pin_in_use_by_gpiote</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_gpiote))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[2e8]"></a>pin_in_use_by_port</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[2e9]"></a>pin_in_use_by_te</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_uninit
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[2f2]"></a>pin_in_use_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_uninit
</UL>

<P><STRONG><a name="[1e1]"></a>apply_config</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_txrx_pins_set
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_hwfc_pins_set
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_txrx_pins_set
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_hwfc_pins_set
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[310]"></a>nrf_drv_uart_rx_for_uart</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx_for_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_uart_rx_for_uart &rArr; rx_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[30f]"></a>nrf_drv_uart_rx_for_uarte</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx_for_uarte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_uart_rx_for_uarte
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_task_trigger
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_enable
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[318]"></a>nrf_drv_uart_tx_for_uart</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx_for_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_uart_tx_for_uart &rArr; tx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[317]"></a>nrf_drv_uart_tx_for_uarte</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx_for_uarte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_uart_tx_for_uarte
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_task_trigger
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[31b]"></a>nrf_gpio_cfg</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[1e4]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[1e3]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[1e2]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[3a1]"></a>nrf_uart_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[312]"></a>nrf_uart_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
</UL>

<P><STRONG><a name="[30b]"></a>nrf_uart_event_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[1e8]"></a>nrf_uart_hwfc_pins_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_hwfc_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[30e]"></a>nrf_uart_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[30c]"></a>nrf_uart_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[3a0]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[314]"></a>nrf_uart_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
</UL>

<P><STRONG><a name="[1e7]"></a>nrf_uart_txrx_pins_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_txrx_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[3a4]"></a>nrf_uarte_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[316]"></a>nrf_uarte_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uarte
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uarte
</UL>

<P><STRONG><a name="[309]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uarte
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uarte
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[1e6]"></a>nrf_uarte_hwfc_pins_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_hwfc_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[30d]"></a>nrf_uarte_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[30a]"></a>nrf_uarte_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uarte
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[3a5]"></a>nrf_uarte_rx_amount_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_rx_amount_get))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[315]"></a>nrf_uarte_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uarte
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uarte
</UL>

<P><STRONG><a name="[1e5]"></a>nrf_uarte_txrx_pins_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_txrx_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[313]"></a>rx_byte</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
</UL>

<P><STRONG><a name="[3a2]"></a>rx_done_event</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[311]"></a>rx_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rx_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_enable
</UL>

<P><STRONG><a name="[319]"></a>tx_byte</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
</UL>

<P><STRONG><a name="[3a3]"></a>tx_done_event</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[174]"></a>uart_irq_handler</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_irq_handler &rArr; rx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[173]"></a>uarte_irq_handler</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.uarte_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uarte_irq_handler &rArr; rx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_rx_amount_get
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[1bd]"></a>app_notify</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, pstorage.o(i.app_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>

<P><STRONG><a name="[1bc]"></a>app_notify_error_state_transit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pstorage.o(i.app_notify_error_state_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_failure_run
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>

<P><STRONG><a name="[244]"></a>clear_operation_execute</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, pstorage.o(i.clear_operation_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_word_size_calculate
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_operation_execute
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>

<P><STRONG><a name="[247]"></a>clear_post_processing_run</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pstorage.o(i.clear_post_processing_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_operation_execute
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_sm_exit_action_run
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
</UL>

<P><STRONG><a name="[254]"></a>cmd_process</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, pstorage.o(i.cmd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_operation_execute
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_operation_execute
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_dequeue
</UL>

<P><STRONG><a name="[256]"></a>cmd_queue_dequeue</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pstorage.o(i.cmd_queue_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = cmd_queue_dequeue &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_idle_entry_run
</UL>

<P><STRONG><a name="[259]"></a>cmd_queue_element_init</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, pstorage.o(i.cmd_queue_element_init))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_queue_element_consume
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_init
</UL>

<P><STRONG><a name="[257]"></a>cmd_queue_enqueue</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, pstorage.o(i.cmd_queue_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_update
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
</UL>

<P><STRONG><a name="[258]"></a>cmd_queue_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pstorage.o(i.cmd_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd_queue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_element_init
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
</UL>

<P><STRONG><a name="[248]"></a>command_end_procedure_run</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pstorage.o(i.command_end_procedure_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = command_end_procedure_run &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_queue_element_consume
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sub_state_sm_run
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>

<P><STRONG><a name="[25b]"></a>command_queue_element_consume</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pstorage.o(i.command_queue_element_consume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = command_queue_element_consume
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_element_init
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>

<P><STRONG><a name="[73]"></a>data_page_erase_state_run</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, pstorage.o(i.data_page_erase_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = data_page_erase_state_run &rArr; swap_sub_sm_exit_action_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_sm_exit_action_run
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>data_to_swap_write_state_run</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pstorage.o(i.data_to_swap_write_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = data_to_swap_write_state_run &rArr; swap_sub_state_err_busy_process &rArr; swap_sub_state_state_change &rArr; swap_sub_state_entry_action_run
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[291]"></a>erase_sub_state_sm_run</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pstorage.o(i.erase_sub_state_sm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = erase_sub_state_sm_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_state_err_busy_process
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[2a0]"></a>flash_api_err_code_process</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pstorage.o(i.flash_api_err_code_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>

<P><STRONG><a name="[2a1]"></a>flash_operation_failure_run</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, pstorage.o(i.flash_operation_failure_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = flash_operation_failure_run &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
</UL>

<P><STRONG><a name="[2a2]"></a>flash_operation_success_run</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pstorage.o(i.flash_operation_success_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = flash_operation_success_run &rArr; erase_sub_state_sm_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_sm_run
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sub_state_sm_run
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
</UL>

<P><STRONG><a name="[2a5]"></a>flash_page_erase</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pstorage.o(i.flash_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_erase_data_page_entry_run
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_entry_run
</UL>

<P><STRONG><a name="[2a6]"></a>flash_write</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, pstorage.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
</UL>

<P><STRONG><a name="[75]"></a>head_restore_state_run</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, pstorage.o(i.head_restore_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = head_restore_state_run &rArr; swap_sub_sm_exit_action_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_sm_exit_action_run
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tail_data_page_swap_required
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[26d]"></a>is_page_erase_required</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, pstorage.o(i.is_page_erase_required))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = is_page_erase_required
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[2cb]"></a>is_tail_data_page_swap_required</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, pstorage.o(i.is_tail_data_page_swap_required))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = is_tail_data_page_swap_required
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
</UL>

<P><STRONG><a name="[378]"></a>is_word_aligned</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pstorage.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_update
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
</UL>

<P><STRONG><a name="[292]"></a>main_state_err_busy_process</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pstorage.o(i.main_state_err_busy_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = main_state_err_busy_process &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sub_state_sm_run
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
</UL>

<P><STRONG><a name="[379]"></a>pstorage_flash_page_end</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pstorage.o(i.pstorage_flash_page_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pstorage_flash_page_end
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
</UL>

<P><STRONG><a name="[245]"></a>pstorage_flash_page_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_flash_page_size))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_word_size_calculate
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tail_data_page_swap_required
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>

<P><STRONG><a name="[1be]"></a>sm_state_change</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pstorage.o(i.sm_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_operation_execute
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_state_err_busy_process
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_failure_run
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>

<P><STRONG><a name="[388]"></a>state_data_erase_entry_run</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pstorage.o(i.state_data_erase_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = state_data_erase_entry_run &rArr; flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>

<P><STRONG><a name="[389]"></a>state_data_erase_swap_entry_run</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, pstorage.o(i.state_data_erase_swap_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = state_data_erase_swap_entry_run &rArr; swap_sub_state_state_change &rArr; swap_sub_state_entry_action_run
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>

<P><STRONG><a name="[384]"></a>state_entry_action_run</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pstorage.o(i.state_entry_action_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_store_entry_run
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_idle_entry_run
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_entry_run
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>

<P><STRONG><a name="[6e]"></a>state_erase_data_page_entry_run</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pstorage.o(i.state_erase_data_page_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = state_erase_data_page_entry_run &rArr; flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[38a]"></a>state_idle_entry_run</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pstorage.o(i.state_idle_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = state_idle_entry_run &rArr; cmd_queue_dequeue &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>

<P><STRONG><a name="[70]"></a>state_restore_head_entry_run</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pstorage.o(i.state_restore_head_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = state_restore_head_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>state_restore_tail_entry_run</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, pstorage.o(i.state_restore_tail_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = state_restore_tail_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[38b]"></a>state_store_entry_run</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pstorage.o(i.state_store_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>

<P><STRONG><a name="[6c]"></a>state_swap_erase_entry_run</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pstorage.o(i.state_swap_erase_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = state_swap_erase_entry_run &rArr; flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>state_write_data_swap_entry_run</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, pstorage.o(i.state_write_data_swap_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = state_write_data_swap_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[38c]"></a>store_cmd_flash_write_execute</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, pstorage.o(i.store_cmd_flash_write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sub_state_sm_run
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_store_entry_run
</UL>

<P><STRONG><a name="[249]"></a>store_operation_execute</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pstorage.o(i.store_operation_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>

<P><STRONG><a name="[2a3]"></a>store_sub_state_sm_run</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, pstorage.o(i.store_sub_state_sm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = store_sub_state_sm_run &rArr; main_state_err_busy_process &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_state_err_busy_process
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[71]"></a>swap_erase_state_run</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pstorage.o(i.swap_erase_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = swap_erase_state_run &rArr; swap_sub_state_err_busy_process &rArr; swap_sub_state_state_change &rArr; swap_sub_state_entry_action_run
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[26e]"></a>swap_sub_sm_exit_action_run</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pstorage.o(i.swap_sub_sm_exit_action_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = swap_sub_sm_exit_action_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[38e]"></a>swap_sub_state_entry_action_run</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pstorage.o(i.swap_sub_state_entry_action_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swap_sub_state_entry_action_run
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
</UL>

<P><STRONG><a name="[26f]"></a>swap_sub_state_err_busy_process</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pstorage.o(i.swap_sub_state_err_busy_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = swap_sub_state_err_busy_process &rArr; swap_sub_state_state_change &rArr; swap_sub_state_entry_action_run
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_erase_state_run
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_swap_write_state_run
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[2a4]"></a>swap_sub_state_sm_run</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pstorage.o(i.swap_sub_state_sm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swap_sub_state_sm_run
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[26c]"></a>swap_sub_state_state_change</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pstorage.o(i.swap_sub_state_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = swap_sub_state_state_change &rArr; swap_sub_state_entry_action_run
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_entry_action_run
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_erase_state_run
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_failure_run
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_swap_write_state_run
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[74]"></a>tail_restore_state_run</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pstorage.o(i.tail_restore_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tail_restore_state_run &rArr; swap_sub_sm_exit_action_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_sm_exit_action_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[246]"></a>tail_word_size_calculate</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, pstorage.o(i.tail_word_size_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tail_word_size_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>

<P><STRONG><a name="[255]"></a>update_operation_execute</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pstorage.o(i.update_operation_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>

<P><STRONG><a name="[15f]"></a>irq_handler_twi</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, nrf_drv_twi.o(i.irq_handler_twi))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = irq_handler_twi &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[306]"></a>nrf_drv_get_IRQn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_drv_get_IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[397]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[396]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[39e]"></a>nrf_twi_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twi_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[39b]"></a>nrf_twi_event_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twi_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>

<P><STRONG><a name="[39f]"></a>nrf_twi_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twi_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
</UL>

<P><STRONG><a name="[39c]"></a>nrf_twi_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twi_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>

<P><STRONG><a name="[399]"></a>nrf_twi_shorts_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twi_shorts_set))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_receive_byte
</UL>

<P><STRONG><a name="[39a]"></a>nrf_twi_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twi_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_send_byte
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_receive_byte
</UL>

<P><STRONG><a name="[305]"></a>twi_clear_bus</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.twi_clear_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[398]"></a>twi_receive_byte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_receive_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_receive_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_task_trigger
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_shorts_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[2d2]"></a>twi_rx_start_transfer</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, nrf_drv_twi.o(i.twi_rx_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = twi_rx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_task_trigger
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_shorts_set
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_int_enable
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>

<P><STRONG><a name="[39d]"></a>twi_send_byte</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[2d0]"></a>twi_transfer</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, nrf_drv_twi.o(i.twi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_send_byte
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_receive_byte
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_task_trigger
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_clear
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>

<P><STRONG><a name="[2d1]"></a>twi_tx_start_transfer</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, nrf_drv_twi.o(i.twi_tx_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_send_byte
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_task_trigger
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_shorts_set
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_int_enable
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>

<P><STRONG><a name="[308]"></a>twi_xfer</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, nrf_drv_twi.o(i.twi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_int_enable
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_int_disable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>

<P><STRONG><a name="[29b]"></a>finish_transfer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.finish_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finish_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spim
</UL>

<P><STRONG><a name="[160]"></a>irq_handler_spim</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.irq_handler_spim))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = irq_handler_spim &rArr; finish_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_clear
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM2_SPIS2_SPI2_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
</UL>

<P><STRONG><a name="[387]"></a>nrf_drv_is_in_RAM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_drv_is_in_RAM))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[2fe]"></a>nrf_gpio_cfg</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[2fd]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[2fc]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[29c]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[2ce]"></a>nrf_spim_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spim
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
</UL>

<P><STRONG><a name="[2cf]"></a>nrf_spim_event_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spim_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spim
</UL>

<P><STRONG><a name="[302]"></a>nrf_spim_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spim_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
</UL>

<P><STRONG><a name="[2ff]"></a>nrf_spim_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spim_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[303]"></a>nrf_spim_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spim_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
</UL>

<P><STRONG><a name="[304]"></a>spim_xfer</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, nrf_drv_spi.o(i.spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_task_trigger
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_int_enable
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_int_disable
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_clear
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_is_in_RAM
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>

<P><STRONG><a name="[2d6]"></a>are_app_channels</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.are_app_channels))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
</UL>

<P><STRONG><a name="[2d3]"></a>is_allocated_channel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_drv_ppi.o(i.is_allocated_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_allocated_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_to_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
</UL>

<P><STRONG><a name="[2d5]"></a>is_app_channel</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf_drv_ppi.o(i.is_app_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_to_mask
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_app_channels
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
</UL>

<P><STRONG><a name="[2d7]"></a>is_programmable_app_channel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_drv_ppi.o(i.is_programmable_app_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_programmable_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_to_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
</UL>

<P><STRONG><a name="[2d4]"></a>nrf_drv_ppi_channel_to_mask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_to_mask))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>

<P><STRONG><a name="[2f7]"></a>nrf_ppi_channel_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.nrf_ppi_channel_disable))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
</UL>

<P><STRONG><a name="[156]"></a>nrf_saadc_buffer_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_buffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[155]"></a>nrf_saadc_channel_input_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_channel_input_set))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>nrf_saadc_event_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>nrf_saadc_event_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[2fa]"></a>nrf_saadc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
</UL>

<P><STRONG><a name="[2fb]"></a>nrf_saadc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
</UL>

<P><STRONG><a name="[153]"></a>nrf_saadc_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[1b9]"></a>fifo_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_fifo.o(i.fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[1b8]"></a>fifo_length</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_length))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[293]"></a>fifo_peek</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_fifo.o(i.fifo_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>

<P><STRONG><a name="[1bb]"></a>fifo_put</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_put))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>

<P><STRONG><a name="[1c1]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[1c3]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[393]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>

<P><STRONG><a name="[1c2]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
</UL>

<P><STRONG><a name="[260]"></a>compare_reg_update</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compare_reg_update &rArr; timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_compare0_set
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[390]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[391]"></a>expired_timers_handler</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, app_timer.o(i.expired_timers_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = expired_timers_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[2d8]"></a>list_deletions_handler</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, app_timer.o(i.list_deletions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = list_deletions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[2da]"></a>list_insertions_handler</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[263]"></a>rtc1_compare0_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_compare0_set))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[1c5]"></a>rtc1_counter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[1c4]"></a>rtc1_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[262]"></a>rtc1_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_start
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[1c0]"></a>rtc1_stop</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[261]"></a>ticks_diff_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.ticks_diff_get))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[38f]"></a>timeout_handler_exec</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_timer.o(i.timeout_handler_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = timeout_handler_exec &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[166]"></a>timer_list_handler</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired_timers_handler
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[392]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[2db]"></a>timer_list_insert</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[2d9]"></a>timer_list_remove</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
</UL>

<P><STRONG><a name="[1c8]"></a>timer_start_op_schedule</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, app_timer.o(i.timer_start_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[1ca]"></a>timer_stop_op_schedule</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[150]"></a>timer_timeouts_check</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = timer_timeouts_check &rArr; timeout_handler_exec &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; save_data_before_reset &rArr; gc_flash_fwrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; spi_send_recv &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[264]"></a>timer_timeouts_check_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_timeouts_check_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[1c7]"></a>user_id_get</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, app_timer.o(i.user_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = user_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[394]"></a>user_op_alloc</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[395]"></a>user_op_enque</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_timer.o(i.user_op_enque))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[1da]"></a>__sd_nvic_irq_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.__sd_nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>

<P><STRONG><a name="[1d8]"></a>sd_nvic_critical_region_enter</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, app_util_platform.o(i.sd_nvic_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[158]"></a>_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, segger_rtt.o(i._Init))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[15d]"></a>_PrintInt</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, segger_rtt_printf.o(i._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[15e]"></a>_PrintUnsigned</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, segger_rtt_printf.o(i._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[15c]"></a>_StoreChar</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, segger_rtt_printf.o(i._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[385]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, softdevice_handler.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[123]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, oled.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Power
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_OLED_PORT
</UL>

<P><STRONG><a name="[328]"></a>pah8002_dyn_switch_ppg_mode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pah8002.o(i.pah8002_dyn_switch_ppg_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pah8002_dyn_switch_ppg_mode &rArr; pah8002_enter_normal_long_et_mode &rArr; pah8002_start &rArr; pah8002_wakeup &rArr; pah8002_read_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_read_reg
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_write_reg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_wakeup
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_normal_long_et_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_task
</UL>

<P><STRONG><a name="[329]"></a>pah8002_enter_normal_long_et_mode</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, pah8002.o(i.pah8002_enter_normal_long_et_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pah8002_enter_normal_long_et_mode &rArr; pah8002_start &rArr; pah8002_wakeup &rArr; pah8002_read_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_read_reg
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_write_reg
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_sw_reset
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_start
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_normal_long_et_mode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_dyn_switch_ppg_mode
</UL>

<P><STRONG><a name="[193]"></a>pah8002_get_touch_flag_ppg_mode</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, pah8002.o(i.pah8002_get_touch_flag_ppg_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pah8002_get_touch_flag_ppg_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pah8002_task
</UL>

<P><STRONG><a name="[32b]"></a>pah8002_normal_long_et_mode_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pah8002.o(i.pah8002_normal_long_et_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pah8002_normal_long_et_mode_init &rArr; pah8002_wakeup &rArr; pah8002_read_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_write_reg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_normal_long_et_mode
</UL>

<P><STRONG><a name="[32e]"></a>pah8002_normal_mode_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pah8002.o(i.pah8002_normal_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pah8002_normal_mode_init &rArr; pah8002_wakeup &rArr; pah8002_read_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_write_reg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_normal_mode
</UL>

<P><STRONG><a name="[32c]"></a>pah8002_start</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pah8002.o(i.pah8002_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pah8002_start &rArr; pah8002_wakeup &rArr; pah8002_read_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_read_reg
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_write_reg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_normal_mode
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_touch_mode
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_normal_long_et_mode
</UL>

<P><STRONG><a name="[32a]"></a>pah8002_sw_reset</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, pah8002.o(i.pah8002_sw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pah8002_sw_reset &rArr; pah8002_wakeup &rArr; pah8002_read_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_read_reg
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_write_reg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_suspend_mode
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_normal_mode
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_touch_mode
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_normal_long_et_mode
</UL>

<P><STRONG><a name="[330]"></a>pah8002_touch_mode_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pah8002.o(i.pah8002_touch_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pah8002_touch_mode_init &rArr; pah8002_wakeup &rArr; pah8002_read_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_write_reg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_enter_touch_mode
</UL>

<P><STRONG><a name="[18f]"></a>pah8002_wakeup</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, pah8002.o(i.pah8002_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pah8002_wakeup &rArr; pah8002_read_reg &rArr; _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_read_reg
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_get_touch_flag
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pah8002_task
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_touch_mode_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_sw_reset
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_start
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_normal_mode_init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_normal_long_et_mode_init
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_dyn_switch_ppg_mode
</UL>

<P><STRONG><a name="[199]"></a>_read_reg</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, pah8002_comm_spi.o(i._read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _read_reg &rArr; spi_burst_read_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_burst_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_read_reg
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_burst_read_reg
</UL>

<P><STRONG><a name="[19b]"></a>_set_bank</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pah8002_comm_spi.o(i._set_bank))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _set_bank &rArr; _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_read_reg
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_write_reg
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_burst_read_reg
</UL>

<P><STRONG><a name="[19c]"></a>_write_reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pah8002_comm_spi.o(i._write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _write_reg &rArr; spi_write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_bank
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8002_write_reg
</UL>

<P><STRONG><a name="[266]"></a>nrf_gpio_cfg</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, spi_pah8002.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gpio_pah8002
</UL>

<P><STRONG><a name="[169]"></a>errata_16</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_16))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[16a]"></a>errata_31</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_31))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[16b]"></a>errata_32</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_32))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[16c]"></a>errata_36</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_36))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[16d]"></a>errata_37</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_37))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[16e]"></a>errata_57</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_57))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[16f]"></a>errata_66</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_66))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[194]"></a>_pah8series_hr_entrance_check</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, pah8series_hr.o(i._pah8series_hr_entrance_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _pah8series_hr_entrance_check &rArr; _pah8series_hr_reset &rArr; HR8002_Reset &rArr; HR8002_Set_PPG_Ch_Num_Is_IR
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pah8series_hr_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pah8series_hr_entrance
</UL>

<P><STRONG><a name="[195]"></a>_pah8series_hr_reset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pah8series_hr.o(i._pah8series_hr_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _pah8series_hr_reset &rArr; HR8002_Reset &rArr; HR8002_Set_PPG_Ch_Num_Is_IR
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR8002_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pah8series_hr_entrance_check
</UL>

<P><STRONG><a name="[296]"></a>mul_s32_s32_s32_sr30</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, filter8002_fixed.o(i.mul_s32_s32_s32_sr30))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_common
</UL>

<P><STRONG><a name="[295]"></a>mul_s32_s32_s32_sr31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, filter8002_fixed.o(i.mul_s32_s32_s32_sr31))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_common
</UL>

<P><STRONG><a name="[18d]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[176]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[197]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[196]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[38]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
